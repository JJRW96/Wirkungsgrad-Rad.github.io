---
title: "Anaerobe- alaktazide Energiekomponente (W~PCr~)"

format:
  html:
    resources: 
      - shinylive-sw.js
      
filters:
  - shinylive

execute:
  message: false
  engine: knitr
  echo: false
  warning: false
  error: false
bibliography: references.bib
lang: de
number-sections: false
editor: 
  markdown: 
    wrap: 72
    
nocite: |
  @Heck2006, @Keul1972, @Stegemann1991, @DeMarees2003, @Brooks2004, @Karlsson1971, @Knuttgen1973, @Hultman1967, @Harris1974, @Gaitanos1993, @Bangsbo1993, @Walter1999; @Nelson2012; @Horn2021 ; @Putman1998; Parolin1999; @Bogdanis1996;   @Hill1924, @Margaria1933, @Margaria1963, @Margaria1964, @DiPrampero1971, @Margaria1972, @DiPrampero1973, @Katch1973, @Roberts1978, @Beneke2002, @Beneke2004, @Francescato2003, @Dunst2023a, @Dunst2023b, @Berg1947, @Henry1950a, @Henry1950, @Henry1951, @DeMoor1954, @Henry1956, @Royce1969, @Katch1972, @DiPrampero1981, @Oezyener2001, @Dunst2023b, @Langley2024, @Parolin2000
---

```{css}
#| echo: false
p {
  text-align: justify
}
caption, .figure-caption {
  text-align: left;
}
figure.quarto-float-tbl figcaption {
  text-align: left !important;
}
figure figcaption {
  text-align: justify;
}
```

```{r}
library(dplyr)
library(tidyr)
library(readxl)
library(ggplot2)
library(DT)
library(extrafont)
library(shiny)
library(plotly)
library(shinylive)
```

```{r}
# VO2 (t) IN ALLEN FOLGENDEN FORMELN ANPASSEN UND EINFÜGEN FALLS NÖTIG

# Francescato2023 für gute Einleitung und Historie zur italieneishen Ansicht zur EPOC abs ca. S.60

# Stirling2005 für gute Modellbeschriebung der 3-Phasen für VO2_on sowie EPOC --> Evtl. nochmal dei dleay der EPOC finktionen beschrieben

#Unbedingt @Brooks2012 mit einbauen !!!!
#Und @Brooks2004 ab Seite 218 für kritische Sichtweise der EPOC

#BEIM BEGINN und Ende von Muskelübungen beim Menschen hinkt derO₂-Verbrauch (V˙O2V˙O2), wie am Mund gemessen, den mechanischenEreignissen der Kontraktion hin-terher. Daraus folgt, dass das V˙O2V˙O2durch den Mund zu Beginn für den Energiebedarf der Muskeln unzureichendist; am Ende ist es überschüssig. @DiPrampero1983

#Um die der anaeroben- alaktazide Energiekomponente W~PCr~ zu bestimmen,
#wurde der Verlauf des Sauerstoffvolumenstroms zu Beginn und nach dem
#Ende der Belastung betrachtet.

#Zu Beginn der körperlichen Belastung passt sich das Herz-Kreislauf- und
#Atmungssystem nur verzögert an den gestiegenen Sauerstoffbedarf für zu
#erbringende mechanische Leistung an.

#Dies führt zu einem Sauerstoffdefizit bzw. Sauerstoffschuld, die am Ende
#der Übung ausgeglichen wird.

#Statt den häufig verwendeten Begriffen Sauerstoffdefizit oder
#Sauerstoffschuld beschreibt laut [@Brooks2004, 218; @Gaesser1984] ***+
#Brooks 1970 und 1981 nachschlagen*** der Begriff "Excess post-exercise
#oxygen consumption" oder kurz EPOC die nachgeatmete Sauerstoffmenge nach
#Arbeitsende über den Ruhebedarf hinaus besser,da diese meist größer ist
#als das anfänglich eingegangene Sauerstoffdefizit [@DeMarees2003, 377].
#im folgenden wird der Begriff EPOC verwendet in dieser Arbeit.

#Ein Teil des EPOC wird durch Sauerstoff gedeckt, der aus den Speichern
#von Blut und Gewebe freigesetzt wird (O\~2, Speicher\~.

#Der verbleibende Anteil, bei Belastungsintensitäten unterhalb der
#anaeroben Schwelle, wird durch die Spaltung von energiereichen
#Phosphaten, hauptsächlich Phosphokreatin (PC),
#gedeckt.[@Francescato2003]

#Die EPOC gliedert sich in einen langsamen Teil, die sogenannte
#„slow-component“ (= V̇O2EPOCslow) und einen schnellen Teil, die
#„fast-component“. Der erhöhte V̇O2 des schnelle Teils ist größtenteils
#auf die Auffüllung der ATP- und CrP-Speicher + der Wiederauffüllung von
#O2-Speichern (Hämoglobin, Myoglobin) nach der Belastung zurückzuführen
#und repräsentiert somit den alaktaziden Teil der anaeroben
#Energiebereitstellung.

#Neben der Wiederherstellung der energiereichen Phosphate können auch
#Faktoren wie der Transport von Laktat *( Glukoneogenese aus Laktat)*,
#eine erhöhte Körperkerntemperatur, eine gestei-gerte Durchblutung oder
#eine erhöhte Ventilation zur "fast-component" des EPOC beitragen
#(Børsheim & Bahr, 2003)

#Die Ursachen für den langsamen Teil der EPOC sind nicht eindeutig
#geklärt, jedoch werden verschiedene Faktoren wie eine erhöhte Aktivität
#des Sympathikus, des Stoffwechsels, des Herz-Kreislauf-Systems sowie die
#Rückumwandlung des angefallenen Laktats als potenzielle Ursachen
#ge-nannt (Åstrand et al., 2003, S. 241; Bahr & Sejersted, 1991) +
#*(Erhöhter Sauerstoffbedarf des Körpergewebes infolge einer erhöhten
#Körpertemperatur und eines erhöhten Katecholaminspiegels (eine erhöhte
#Adrenalinausschüttung verursacht eine Steigerung oxidativer Prozesse)
#Erhöhte Tätigkeit des Herzmuskels und der Atmungseigenmuskulatur mit
#einem entsprechend vergrößerten Sauerstoffbedarf Vermehrte Produktion
#des Schilddrüsenhormons Thyroxin).*

#Da der Anteil der Energieversorgung durch das anaerob-alaktazide System
#an der gesamten umgesetzten chemischen Energie während einer Belastung
#nicht *(oder nur schwer durch Biopsie)* direkt messbar ist, wird die
#schnelle Komponente der EPOC berechnet und als Schätz-wert für den WPCr
#verwendet (R. Beneke et al., 2004).

#--\> 3. Komponente der ultra slow anteil auch kurz besprechen, aber im
#Kontext der Arbeit nicht relevant (Gründe: Erhöhter Muskeltonus
#Zelluläre Regenerationsvorgänge Stimulation energiebereitstellender
#Mechanismen (z. B. Atmungskette))*(Margaria et al., 1933)

#–\> Nach dem Ende einer aeroben Belastung ist der unmittelbare Abfall des VO2 vermutlich auf einen plötzlichen Abfall des Herzzeitvolumens zurückzuführen (die Herzfrequenz sinkt unter diesen Bedingungen ebenfalls sehr schnell) (3). Dies kompensiert den Zufluss von gemischt-venösem Blut mit niedrigem Sauerstoffgehalt zur Lunge, was dazu tendieren würde, einen hohen VO2 während der ersten Halbkreislaufzeit
#aufrechtzuerhalten.#Sauerstoffabfall anders nach hohen anaeroben Belastungen und aeroben Belastungen
#Im Gegensatz dazu bleibt nach dem Ende einer supramaximalen Belastung die Herzfrequenz für einige Sekunden auf maximalem Niveau (Abb. 5), was darauf hindeutet, dass das Herzzeitvolumen zu Beginn der Erholung zunächst hoch bleibt. Dies legt nahe, dass die Mechanismen, die das Herzzeitvolumen und damit die Sauerstoffversorgung der aktiven Gewebe steuern, unter diesen beiden Bedingungen völlig unterschiedlich sind und dass td nicht einfach ein Abbild der Kreislaufzeit ist.*** --> Deshalb ein größeres t_delay bei anaeroben belastungen als bei aeroben SS Belastungen*** @DiPrampero1973***

```

Um die anaeroben-alaktazide Energiekomponente W~PCr~ zu bestimmen, wurde
der Verlauf des Sauerstoffvolumenstroms zu Beginn und nach dem Ende der
Belastung betrachtet. Zu Beginn der körperlichen Belastung passt sich
das Herz-Kreislauf- und Atmungssystem nur verzögert an den gestiegenen
Sauerstoffbedarf für die zu erbringende mechanische Leistung an. Dies
führt zu einem Sauerstoffdefizit bzw. einer Sauerstoffschuld, die am
Ende der Übung ausgeglichen wird [@DiPrampero1983].<br>Statt den häufig
verwendeten Begriffen Sauerstoffdefizit oder Sauerstoffschuld beschreibt
laut [@Brooks2004, 218; @Gaesser1984] der Begriff "Excess post-exercise
oxygen consumption" (EPOC) die nachgeatmete Sauerstoffmenge nach
Arbeitsende über den Ruhebedarf hinaus besser, da diese meist größer ist
als das anfänglich eingegangene Sauerstoffdefizit [@DeMarees2003, 377].
Im Folgenden wird der Begriff EPOC verwendet.

Ein Teil des EPOC wird aus den O~2~-Speichern von Blut und Gewebe bereitgestellt. Der verbleibende Anteil, bei Belastungsintensitäten unterhalb der anaeroben Schwelle, wird durch die Spaltung von energiereichen Phosphaten, hauptsächlich dem Phosphokreatin (PCr), gedeckt. Diese nach der Belastung aufgenommene Sauerstoffmenge dient dabei primär der Wiederherstellung des homöostatischen Gleichgewichts und der Resynthese des umgesetzten PCr, weshalb sie energetisch der Belastungsphase zugeordnet werden muss [@Francescato2003; @Baum2008; @Dunst2019].

```{r}
#WAS IST ÜBER DER AS???
```

Die EPOC gliedert sich in einen langsamen Teil, die sogenannte
"slow-component" $\dot{V}O_{2,EPOC,slow}$ und einen schnellen Teil, die
"fast-component" $\dot{V}O_{2,EPOC,fast}$ (siehe @fig-EPOC). Der erhöhte
$\dot{V}O_{2}$ des schnellen Teils ist größtenteils auf die Auffüllung
der ATP- und CrP-Speicher sowie die Wiederauffüllung von O~2~-Speichern
(Hämoglobin, Myoglobin) nach der Belastung zurückzuführen und
repräsentiert somit den alaktaziden Teil der anaeroben
Energiebereitstellung. Neben der Wiederherstellung der energiereichen
Phosphate können auch Faktoren wie der Transport von Laktat
(Glukoneogenese aus Laktat), eine erhöhte Körperkerntemperatur, eine
gesteigerte Durchblutung oder eine erhöhte Ventilation zur
"fast-component" des EPOC beitragen [@Børsheim2003].

Die Ursachen für den langsamen Teil der EPOC sind nicht eindeutig
geklärt, jedoch werden verschiedene Faktoren wie eine erhöhte Aktivität
des Sympathikus, des Stoffwechsels, des Herz-Kreislauf-Systems sowie die
Rückumwandlung des angefallenen Laktats als potenzielle Ursachen genannt
[@Astrand2003, 241; @Bahr1991]. Weitere mögliche Gründe beinhalten einen
erhöhten Sauerstoffbedarf des Körpergewebes infolge einer erhöhten
Körpertemperatur und eines erhöhten Katecholaminspiegels (eine erhöhte
Adrenalinausschüttung verursacht eine Steigerung oxidativer Prozesse),
eine erhöhte Tätigkeit des Herzmuskels und der Atmungseigenmuskulatur
mit einem entsprechend vergrößerten Sauerstoffbedarf.<br>
Obwohl es auch eine ultra-langsame Komponente der
EPOC gibt, die durch Faktoren wie erhöhten Muskeltonus, zelluläre
Regenerationsvorgänge und die Stimulation energiebereitstellender
Mechanismen (z.B. Atmungskette) verursacht wird [@Margaria1933], ist
diese im Kontext der vorliegenden Arbeit nicht relevant.

Da der Anteil der Energieversorgung durch das anaerob-alaktazide System
an der gesamten umgesetzten chemischen Energie während einer Belastung
nicht oder nur sehr schwer direkt messbar ist, wird die schnelle
Komponente der EPOC modelliert und als Basis für die für die Berechnung
der anaeroben-alaktazide Energiekomponente verwendet [@Beneke2004].

![Zeitlicher Verlauf der Komponenten der Excess Post-Exercise Oxygen
Consumption (EPOC) (modifiziert nach Åstrand & Rodahl, 2003, S.
240).](images/EPOC_Astrand_mod.png){#fig-EPOC .caption}

## Modellierung von W~PCr~

Um die anaerob-alaktazide Energiekomponente während jedem Belastungsintervall zu bestimmen, wurde die EPOC mittels nichtlinearer Regression modelliert. Der Startpunkt der Modellierung wurde dabei durch den ersten messbaren Abfall der $\dot{V}O_2\,(t)$ definiert, welcher zeitlich verzögert zum eigentlichen Belastungsende auftreten kann. Diese Zeitverzögerung (t~delay~) wurde in der Datenaufbereitung berücksichtigt, indem nur die $\dot{V}O_2\,(t)$-Werte ab dem ersten eindeutigen Abfall einbezogen wurden. Sie ist daher in den folgenden Modellierungsgleichungen und Abbildungen nicht explizit enthalten. Die Modellierung erfolgte unter Verwendung des folgenden bi-exponentiellen Modells mit vier freien Parametern [@Oezyener2001; @Beneke2002]:

$$
\dot{V}O_{2EPOC}\,(t) = A_{fast} \cdot e^{-(t / \tau_{fast})} + A_{slow} \cdot e^{-(t / \tau_{slow})} + \dot{V}O_{2,Referenz}
$$ {#eq-VO2EPOC}

-   $A_{\text{fast}}$: Amplitude der schnellen EPOC-Komponente
-   $A_{\text{slow}}$: Amplitude der langsamen EPOC-Komponente
-   $\tau_{\text{schnell}}$: Zeitkonstante der schnellen EPOC-Komponente
-   $\tau_{\text{slow}}$: Zeitkonstante der langsamen EPOC-Komponente

### Berechnung von $\dot{V}O_{2,Referenz}$ {.unnumbered .unlisted}

Da die Probanden während den Erholungsphasen nicht vollständig ruhten,
sondern bei 50 Watt weiterfuhren, erreichte der $\dot{V}O_{2}\,(t)$ in der
Nachatmungsphase ($\dot{V}O_{2,EPOC}\,(t)$) nach einem initialen rapiden
Abfall ein Plateau, das signifikant höher war als der mittlere Sauerstoffvolumenstrom im
Ruhezustand ($\dot{V}O_{2,Ruhe}$). Für die Modellierung der EPOC wurde
daher anstelle von $\dot{V}O_{2,Ruhe}$ ein individueller Referenzwert
($\dot{V}O_{2,Referenz}$) berechnet, der den erhöhten Sauerstoffumsatz
bei der in der Nachbelastungsphase vorgegebenen mechanischen Leistung
von P~mech,Referenz~ = 50 Watt widerspiegelt. Die Berechnung des
$\dot{V}O_{2,Referenz}$ erfolgte auf Basis der Messdaten aus der
Referenzphase, die vor der ersten Belastung ebenfalls bei 50 Watt
absolviert wurde. Der individuelle $\dot{V}O_{2,Referenz}$-Wert wurde
als Mittelwert der verbleibenden $\dot{V}O_{2}\,(t)$-Messwerte bestimmt,
nachdem Ausreißer mittels einer rollenden Fensteranalyse eliminiert
wurden.<br> Da bei einigen Probanden Messfehler oder unnatürlich hohe
$\dot{V}O_{2}\,(t)$-Werte auftraten, wurde ebenfalls ein theoretischer
$\dot{V}O_{2,Referenz}$ berechnet. Dieser setzt sich aus dem
$\dot{V}O_{2,Ruhe}$ und einem standardisierten Arbeitsaufwand für
P~mech~ von 50 Watt zusammen (siehe @eq-VO2_Referenz). Der
standardisierte Arbeitsaufwand, auch als Energie-Effizienz
beziehungsweise im Englischen als "oxygen cost of work" bezeichnet,
charakterisiert die Änderung des $\dot{V}O_{2}\,(t)$ bezogen auf die Änderung
der P~mech~ ($\frac{\Delta\dot{V}O_2}{\Delta\text{WR}}$).<br> In der
Literatur finden sich verschiedene Normwerte der Energie-Effizienz bei
der Fahrradergometrie. Nach @Rassouli2015 liegen diese zwischen 8,5 und
11,0 [ml ∙ min<sup>-1</sup> ∙ Watt<sup>-1</sup>]. @Wasserman2011 geben
Werte von etwa 10 [ml ∙ min<sup>-1</sup> ∙ Watt<sup>-1</sup>] an, wobei
für trainierte Radfahrer leicht erhöhte Werte von etwa 11 [ml ∙
min<sup>-1</sup> ∙ Watt<sup>-1</sup>] charakteristisch sind. Von
@Heck2022 wird für die Fahrradergometrie ein Referenzwert von etwa 12
[ml ∙ min<sup>-1</sup> ∙ Watt<sup>-1</sup>] genannt. Experimentelle
Untersuchungen von @Hansen1984 ergaben einen mittleren Anstieg von 9,3 ±
1,35 [ml ∙ min<sup>-1</sup> ∙ Watt<sup>-1</sup>]. @Oezyener2001 zeigten
eine belastungsabhängige Abstufung der Energie-Effizienz: von 11,52 [ml
∙ min<sup>-1</sup> ∙ Watt<sup>-1</sup>] bei moderater über 11,02 \[ml ∙
min<sup>-1</sup> ∙ Watt<sup>-1</sup>\] bei hoher und 10,72 \[ml ∙
min<sup>-1</sup> ∙ Watt<sup>-1</sup>\] bei sehr hoher bis hin zu 9,99
\[ml ∙ min<sup>-1</sup> ∙ Watt<sup>-1</sup>\] bei Ausbelastungen.<br>
Basierend auf den Literaturbefunden wurde für die Berechnung der
$\dot{V}O_{2,Referenz}$ ein konservativer Wert von 10 \[ml ∙
min<sup>-1</sup> ∙ W<sup>-1</sup>\] für
$\frac{\Delta\dot{V}O_2}{\Delta\text{WR}}$ verwendet. Bei einer
Abweichung des ursprünglich ermittelten
$\dot{V}O_{2,Referenz}$-Messwertes von mehr als 10% vom theoretischen
Wert wurde der ermittelte Messwert durch den theoretischen Wert ersetzt,
sodass physiologisch plausible $\dot{V}O_{2,Referenz}$-Werte für die
folgenden Berechnungen gegeben sind.

$$ 
\begin{align}
\dot{V}O_{2,\text{Referenz}} &= \dot{V}O_{2,\text{Ruhe}} + \frac{\Delta\dot{V}O_2}{\Delta\text{WR}} \cdot P_{\text{mech,Referenz}} \\ 
\dot{V}O_{2,\text{Referenz}}\,[\text{l} \cdot \text{min}^{-1}] &= \dot{V}O_{2,\text{Ruhe}}\,[\text{l} \cdot \text{min}^{-1}] + 0.010\,[\text{l} \cdot \text{min}^{-1} \cdot \text{W}^{-1}] \cdot 50\,[\text{W}]
\end{align}
$$ {#eq-VO2_Referenz}

### Dreistufige Modellierung der EPOC {.unnumbered .unlisted}

Die Anpassung der Modellparameter aus @eq-VO2EPOC erfolgte für jeden Belastungsdurchgang in einem dreistufigen Verfahren. Diese sequentielle Modellierung ermöglichte eine systematische Anpassung der Parameter an die individuelle $\dot{V}O_{2}\,(t)$-Nachbelastungskinetik unter Berücksichtigung physiologisch fundierter Grenzwerte aus der Literatur. Die Implementierung der dreistufigen Modellanpassung erwies sich nach systematischer Erprobung als vorteilhaft gegenüber einem einstufigen Modellierungsansatz. Dies zeigte sich sowohl in einer höheren Übereinstimmung der ermittelten Modellparameter mit den in der Literatur dokumentierten Referenzwerten als auch in einer gesteigerten Robustheit bei der Anpassung an unterschiedliche Nachbelastungscharakteristiken. Durch den dreistufigen Ansatz konnten zudem die Parametergrenzen der nichtlinearen Regressionen in den jeweiligen Modellierungsschritten breiter gefasst werden, was die Robustheit der Anpassung zusätzlich erhöhte.

Eine Zusammenstellung relevanter Referenzwerte aus der Fachliteratur, sowohl für die EPOC-Mengen als auch für die Parameter der Bi-Exponentialfunktion des EPOC-Modells, wird in den Tabellen @tbl-EPOC und @tbl-EPOC_Modell dargestellt. Die einzelnen Modellierungsschritte werden in den folgenden Kapiteln detailliert erläutert.

```{r}
#| label: tbl-EPOC
#| tbl-cap-location: top
#| tbl-cap: "Gesamt-EPOC-Mengen & EPOC-Mengen der schnellen Komponente aus der Fachliteratur"

library(flextable)
ft_EPOC <- readRDS("rds/ft_EPOC.rds")

# Anzeigen der Tabelle
ft_EPOC
```

```{r}
#Mean, max und min Werte ohne Langley --> Meist sind es AUsbeelastungswerte
#$EPOC_{fast}$ [ml⋅kg⁻¹]: Minimum: 16.96, Maximum: 33.25, Mittelwert: 32.13 ± 2.59
#$EPOC_{fast}$ [l]: Minimum: 1.44, Maximum: 2.57, Mittelwert: 2.48 ± 0.20
```

```{r}
#| label: tbl-EPOC_Modell
#| tbl-cap-location: top
#| tbl-cap: "Literaturbasierte EPOC-Modellparameter der Bi-Exponentialfunktion"

ft_EPOC_Modell <- readRDS("rds/ft_EPOC_Modell.rds")

# Anzeigen der Tabelle
ft_EPOC_Modell
```

```{r}
#Mean, max und min Werte ohne Ausreißer:
#$A$ [ml⋅min⁻¹]: Minimum: 1.99, Maximum: 3.03, Mittelwert: 2.49 ± 0.62
#$\tau_A$ [s]: Minimum: 28.8, Maximum: 69.6, Mittelwert: 50.4 ± 7.8
#$B$ [ml⋅min⁻¹]: Minimum: 0.20, Maximum: 1.44, Mittelwert: 0.51 ± 0.34
#$\tau_B$ [s]: Minimum: 343.2, Maximum: 1428.6, Mittelwert: 846.0 ± 220.2
```

### 1. Schritt - Bestimmung von $\tau$ {.unnumbered .unlisted}

Um den Zeitraum der $\dot{V}O_{2EPOC, \text{fast}}\,(t)$ in Abhängigkeit von
der individuellen Abfallkinetik des $\dot{V}O_{2,EPOC}\,(t)$ für jede
Nachatmungsphase zu bestimmen, wurde im ersten Schritt die Zeitkonstante
$\tau$ mittels einer nichtlinearen Regression basierend auf folgendem
exponentiellen Drei-Parameter-Modell modelliert:

$$
\dot{V}O_{2EPOC}\,(t) = A \cdot e^{-(t / \tau)} + C
$$ {#eq-EPOCTAU}

Für die nichtlineare Regression wurden folgende Parametergrenzen definiert:<br> $A$: $[0, \infty)$ $\;|\;$ $\tau$: $[10, 600]$ $\;|\;$ $C$: $\text{unbeschränkt}$

Die ermittelte Zeitkonstante $\tau$ wurde zur Abgrenzung des Zeitraums der $\dot{V}O_{2EPOC, \text{fast}}\,(t)$ von der $\dot{V}O_{2EPOC, \text{slow}}\,(t)$ verwendet. Als Grenzwert wurde das Zweifache der Zeitkonstante ($2\tau$) definiert, da zu diesem Zeitpunkt mit etwa 86,5 % bereits ein Großteil des exponentiellen Abfalls von $\dot{V}O_{2,EPOC}\,(t)$ erreicht ist.

![Modellierung der exponentiellen $\dot{V}O_{2EPOC}\,(t)$-Funktion zur Bestimmung der Zeitkonstante $\tau$](images/01_1_tau.html){#fig-TAU width="1200" height="500"}

### 2. Schritt - Modellierung von $\dot{V}O_{2EPOC, \text{slow}}\,(t)$ {.unnumbered .unlisted}

Aufgrund der methodisch bedingten zeitlichen Begrenzung der
Entlastungsphase auf 10 Minuten bei 50 Watt wurde für eine zuverlässige
Modellierung der $\dot{V}O_{2EPOC, \text{slow}}\,(t)$ eine verlängerte
Nachbelastungsphase von 70 Minuten simuliert. Diese Simulation basierte
auf der Annahme, dass nach 60 Minuten sowohl die mit der EPOC~fast~ als
auch EPOC~slow~ assoziierten physiologischen Prozesse weitestgehend
abgeschlossen sind und der $\dot{V}O_{2}\,(t)$ auf das Niveau des berechneten
$\dot{V}O_{2,Referenz}$-Wertes zurückkehrt.<br> Methodisch wurde dies
umgesetzt, indem die berechneten $\dot{V}O_{2,Referenz}$-Werte für den
Zeitraum von 60 bis 70 Minuten in den Datensatz integriert wurden. Die
Anzahl der integrierten $\dot{V}O_{2}\,(t)$-Datenpunkte wurde äquivalent zu
den im Zeitintervall der $\dot{V}O_{2EPOC, \text{slow}}\,(t)$ erfassten
Messpunkten gewählt, beginnend bei $2\tau$ bis zum finalen
$\dot{V}O_{2}\,(t)$-Messwert der Nachbelastungsphase. Diese Vorgehensweise
ermöglichte eine ausgewogene Gewichtung von 50% zwischen den simulierten
und den empirisch erfassten $\dot{V}O_{2,Referenz}$-Punkten in der
nachfolgenden Modellanpassung. Die Anpassung der
$\dot{V}O_{2EPOC, \text{slow}}\,(t)$-Modellfunktion erfolgte mithilfe einer
nichtlinearen Regression, basierend auf folgendem exponentiellen Modell
mit zwei freien Parametern:

$$
\dot{V}O_{2EPOC, slow}\,(t) = A_{slow} \cdot e^{-(t / \tau_{slow})} + \dot{V}O_{2,Referenz}
$$ {#eq-EPOCSLOW}

Für die nichtlineare Regression wurden folgende Parametergrenzen definiert:<br>$A_{slow}$: $[0.1, 0.5 \cdot \dot{V}O_{2,\text{max}} \text{ der Messwerte}]$ $\;|\;$ $\tau_{slow}$: $[90, 3600]$ $\;|\;$ $\dot{V}O_{2,\text{Referenz}}$: $\text{fixer Parameter}$

![Darstellung der $\dot{V}O_{2EPOC, \text{slow}}\,(t)$-Funktion mit den simulierten $\dot{V}O_{2,Referenz}$-Werten](images/01_1_slow.html){#fig-SLOW width="1200" height="500"}

### 3. Schritt - Modellierung von $\dot{V}O_{2EPOC, \text{fast}}\,(t)$ {.unnumbered .unlisted}

Im finalen Modellierungsschritt wurde das EPOC-Teilmodell
$\dot{V}O_{2EPOC, \text{fast}}\,(t)$ der bi-exponentiellen Gesamtfunktion
(@eq-VO2EPOC) unter Berücksichtigung der bereits ermittelten Parameter
der $\dot{V}O_{2EPOC, \text{slow}}\,(t)$ und $\dot{V}O_{2,Referenz}$ mit dem
folgenden exponentiellen Modell mit zwei freien Parametern bestimmt:

$$
\dot{V}O_{2EPOC, fast}\,(t) = A_{fast} \cdot e^{-(t / \tau_{fast})}
$$ {#eq-EPOCFAST}
Die Parametergrenzen für die nichtlineare Regression wurden wie folgt definiert:<br>$A_{fast}$: $[1.0, 1.05 \cdot (\dot{V}O_{2,\text{max}}\,(t) - A_{slow} -\dot{V}O_{2,\text{Referenz}})]$ $\;|\;$ $\tau_{fast}$: $[15, 90]$

Die nach @eq-VO2EPOC modellierte Gesamtfunktion ist in @fig-FAST
dargestellt. Dabei entspricht die grüne Fläche in @fig-FAST unter der
EPOC~fast~-Modellfunktion der O~2~-Menge, die für die Resynthese der
PCr-Speicher benötigt wird.

![Komponenten der $\dot{V}O_{2EPOC}$-Gesamtfunktion: $\dot{V}O_{2EPOC, \text{fast}}$, $\dot{V}O_{2EPOC, \text{slow}}$ und $\dot{V}O_{2,Referenz}$](images/01_1.html){#fig-FAST width="1200" height="500"}

#### **Shiny-App: EPOC-Modellfunktion** {.unlisted}

Die folgende Shiny-App demonstriert die EPOC-Modellanpassung sowohl nach dem beschriebenen Drei-Schritt-Verfahren als auch nach einem einschrittigen Verfahren. Sie ermöglicht das Hochladen eigener $\dot{V}O_{2}(t)$-Daten, die mittels nichtlinearer Regression an die Modellparameter angepasst werden können.

```{shinylive-r}
#| standalone: true
#| viewerHeight: 1200
library(shiny)
library(plotly)
library(minpack.lm)
library(dplyr)
library(shinyjs)

# Beispieldaten ohne Nachbelastung 
t_data <- c(3505.1, 3506.8, 3508.3, 3509.8, 3511.4, 3513.2, 3514.7, 3516.2, 3517.5, 3518.9, 3520.3, 3521.6, 3523.0, 3524.7, 3526.0, 3527.2, 3528.7, 3530.0, 3531.4, 3532.8, 3534.3, 3535.7, 3537.0, 3538.4, 3539.9, 3541.2, 3542.8, 3544.3, 3545.6, 3547.0, 3548.4, 3550.1, 3551.7, 3553.2, 3554.6, 3556.1, 3557.5, 3560.2, 3561.8, 3564.3, 3566.0, 3567.8, 3569.6, 3571.5, 3573.3, 3575.3, 3577.1, 3579.1, 3581.0, 3582.7, 3584.2, 3585.7, 3587.1, 3588.5, 3589.9, 3591.4, 3593.3, 3594.7, 3596.2, 3597.8, 3599.5, 3601.0, 3602.4, 3603.9, 3605.6, 3607.1, 3608.6, 3610.4, 3612.0, 3613.4, 3616.4, 3618.5, 3620.2, 3621.8, 3623.8, 3626.1, 3628.4, 3630.5, 3632.5, 3635.1, 3637.2, 3639.6, 3641.7, 3643.7, 3648.5, 3652.4, 3654.4, 3656.7, 3658.9, 3660.1, 3662.3, 3664.6, 3667.2, 3669.5, 3671.4, 3673.6, 3675.5, 3677.1, 3679.0, 3681.0, 3683.0, 3685.0, 3687.1, 3689.0, 3691.1, 3692.9, 3695.6, 3697.2, 3699.4, 3701.8, 3704.0, 3706.0, 3708.1, 3709.9, 3711.8, 3715.0, 3717.5, 3719.6, 3721.7, 3724.0, 3726.2, 3728.2, 3730.1, 3732.0, 3734.3, 3736.0, 3738.4, 3739.2, 3741.1, 3743.1, 3745.4, 3746.5, 3748.7, 3750.9, 3753.1, 3755.3, 3757.6, 3762.7, 3765.6, 3768.1, 3770.2, 3772.4, 3774.8, 3777.5, 3779.9, 3782.3, 3785.3, 3787.7, 3789.8, 3792.2, 3794.9, 3796.5, 3798.2, 3800.6, 3802.4, 3805.3, 3808.0, 3810.9, 3813.0, 3815.1, 3818.0, 3820.4, 3822.3, 3824.5, 3826.6, 3829.8, 3833.1, 3835.3, 3838.1, 3840.1, 3844.9, 3847.1, 3848.5, 3850.0, 3855.3, 3859.2, 3861.9, 3863.6, 3865.6, 3867.8, 3869.8, 3872.0, 3874.4, 3876.1, 3878.4, 3881.1, 3882.9, 3884.9, 3886.3, 3888.9, 3890.6, 3892.8, 3895.1, 3897.1, 3898.8, 3900.7, 3903.3, 3905.3, 3907.7, 3910.3, 3913.8, 3916.9, 3919.2, 3921.5, 3923.6, 3926.4, 3928.3, 3930.3, 3932.2, 3934.5, 3936.9, 3940.6, 3942.8, 3944.4, 3946.6, 3948.7, 3950.6, 3954.0, 3956.5, 3960.8, 3962.3, 3964.1, 3966.5, 3969.3, 3971.7, 3975.9, 3977.9, 3982.9, 3985.3, 3987.5, 3990.2, 3992.7, 3995.5, 3997.9, 4000.1, 4004.3, 4006.5, 4009.6, 4012.7, 4015.5, 4017.9, 4020.0, 4024.2, 4026.1, 4028.8, 4031.2, 4033.7, 4035.6, 4037.6, 4041.3, 4044.9, 4047.2, 4049.9, 4054.3, 4057.3, 4060.2, 4062.4, 4065.5, 4068.0, 4070.5, 4072.6, 4074.5, 4076.4, 4078.1, 4080.3, 4082.8, 4084.9)
VO2_data <- c(4.3916, 4.33868, 4.29972, 4.26048, 4.25328, 4.22856, 4.18768, 4.16656, 4.118, 4.06268, 4.00452, 3.9486, 3.85204, 3.81448, 3.74268, 3.67572, 3.61052, 3.5468, 3.47268, 3.37056, 3.25912, 3.20024, 3.17932, 3.13008, 3.08712, 2.97636, 2.95052, 2.891, 2.82488, 2.72496, 2.6324, 2.55344, 2.45564, 2.38944, 2.32268, 2.2388, 2.16588, 2.09852, 1.99972, 1.9584, 1.87604, 1.81076, 1.74984, 1.70644, 1.66456, 1.64564, 1.59204, 1.53048, 1.47084, 1.4078, 1.40632, 1.34116, 1.29948, 1.26596, 1.23048, 1.22116, 1.19188, 1.19668, 1.16332, 1.153, 1.15444, 1.14004, 1.14976, 1.15704, 1.15192, 1.15128, 1.14088, 1.1228, 1.11288, 1.10284, 1.07976, 1.07524, 1.0516, 1.0596, 1.0478, 1.03064, 1.03404, 1.01436, 1.01996, 1.02592, 0.99788, 1.00092, 0.96684, 0.98036, 0.96396, 0.96056, 0.94256, 0.93244, 0.92228, 0.9068, 0.90336, 0.88984, 0.87968, 0.88288, 0.85096, 0.84, 0.83584, 0.83428, 0.82228, 0.82996, 0.8382, 0.831, 0.86264, 0.83748, 0.83664, 0.8596, 0.8622, 0.86216, 0.85472, 0.85588, 0.8374, 0.84796, 0.84512, 0.85952, 0.84476, 0.8158, 0.8146, 0.80048, 0.77164, 0.7736, 0.76624, 0.77088, 0.77992, 0.80724, 0.80412, 0.80112, 0.8068, 0.78476, 0.79444, 0.79072, 0.78772, 0.79112, 0.79316, 0.79112, 0.78536, 0.7758, 0.76944, 0.77496, 0.76204, 0.7836, 0.79964, 0.81584, 0.85324, 0.85488, 0.89108, 0.904, 0.89116, 0.87828, 0.86268, 0.8416, 0.84192, 0.83324, 0.8332, 0.83228, 0.83992, 0.8094, 0.79928, 0.80512, 0.811, 0.82524, 0.82652, 0.8246, 0.80908, 0.80036, 0.80152, 0.81324, 0.79372, 0.76376, 0.78108, 0.76332, 0.75032, 0.78964, 0.78632, 0.78452, 0.78252, 0.77932, 0.78952, 0.78984, 0.7888, 0.77604, 0.79476, 0.8106, 0.79136, 0.76844, 0.73712, 0.7374, 0.74148, 0.75156, 0.74932, 0.7288, 0.72612, 0.75984, 0.76316, 0.76744, 0.76004, 0.75084, 0.70948, 0.70316, 0.68816, 0.70184, 0.6916, 0.681, 0.67276, 0.66776, 0.66792, 0.65952, 0.64368, 0.67064, 0.67144, 0.68348, 0.67592, 0.65776, 0.63996, 0.64432, 0.6382, 0.62112, 0.58896, 0.6054, 0.57796, 0.58432, 0.59236, 0.60632, 0.62372, 0.63128, 0.63308, 0.6444, 0.6382, 0.64336, 0.64684, 0.65508, 0.66076, 0.63596, 0.60768, 0.62748, 0.62472, 0.6284, 0.64236, 0.66068, 0.65004, 0.67312, 0.67836, 0.69416, 0.66368, 0.65028, 0.629, 0.62796, 0.60816, 0.61548, 0.61224, 0.62336, 0.61552, 0.62804, 0.63852, 0.64872, 0.641, 0.633, 0.64456, 0.66328, 0.6502, 0.65676, 0.66388, 0.6542, 0.63828, 0.64624, 0.63272, 0.65072, 0.64964)

# Beispieldaten mit 50 Watt Nachbelastung 
t_data_50W <- c(2552.6, 2554.0, 2555.6, 2557.1, 2558.7, 2560.3, 2562.0, 2563.7, 2565.4, 2567.0, 2568.6, 2570.0, 2571.5, 2572.8, 2574.6, 2576.1, 2577.5, 2579.0, 2580.5, 2582.7, 2584.2, 2586.3, 2587.7, 2589.0, 2590.8, 2592.2, 2594.2, 2595.8, 2597.4, 2599.1, 2600.6, 2602.1, 2603.6, 2605.3, 2606.9, 2608.5, 2610.3, 2612.6, 2613.9, 2615.6, 2617.2, 2618.8, 2621.5, 2623.0, 2625.5, 2627.3, 2628.9, 2630.3, 2631.9, 2633.3, 2635.0, 2636.5, 2638.2, 2639.9, 2641.5, 2643.0, 2644.9, 2646.6, 2648.3, 2649.8, 2651.3, 2652.9, 2654.5, 2656.3, 2658.2, 2660.1, 2661.9, 2663.7, 2665.4, 2667.0, 2669.1, 2670.9, 2672.6, 2674.4, 2676.1, 2678.0, 2679.9, 2681.6, 2683.1, 2684.7, 2685.7, 2687.1, 2690.9, 2692.6, 2695.9, 2697.7, 2698.9, 2701.2, 2703.0, 2705.0, 2706.7, 2708.5, 2710.3, 2711.8, 2713.4, 2715.1, 2716.7, 2718.2, 2719.8, 2721.3, 2723.2, 2725.4, 2727.1, 2729.0, 2730.8, 2732.4, 2733.9, 2735.4, 2737.4, 2739.1, 2741.2, 2743.1, 2746.2, 2747.8, 2749.5, 2751.3, 2753.0, 2755.0, 2757.3, 2759.5, 2761.7, 2763.6, 2765.7, 2767.8, 2769.3, 2770.8, 2772.2, 2774.3, 2776.1, 2777.7, 2779.3, 2781.1, 2783.0, 2786.2, 2787.9, 2789.5, 2791.4, 2793.2, 2795.0, 2796.8, 2798.5, 2800.4, 2802.0, 2804.0, 2805.9, 2807.8, 2809.5, 2812.5, 2814.2, 2816.4, 2818.5, 2821.0, 2822.8, 2824.7, 2826.5, 2828.5, 2830.5, 2831.9, 2833.4, 2835.0, 2836.6, 2838.8, 2840.5, 2842.4, 2844.1, 2846.2, 2848.4, 2851.5, 2853.3, 2855.3, 2858.8, 2861.1, 2863.4, 2865.8, 2868.2, 2870.2, 2872.7, 2875.1, 2877.3, 2879.4, 2883.0, 2884.8, 2887.1, 2888.6, 2891.0, 2893.1, 2895.0, 2896.8, 2898.9, 2900.8, 2903.5, 2905.3, 2907.2, 2909.2, 2911.5, 2913.4, 2915.6, 2917.4, 2919.2, 2921.4, 2923.8, 2925.5, 2927.5, 2929.7, 2932.9, 2935.1, 2937.1, 2939.6, 2941.4, 2943.8, 2945.9, 2948.6, 2950.7, 2952.7, 2956.5, 2958.8, 2961.0, 2962.6, 2964.9, 2966.5, 2967.7, 2969.9, 2971.3, 2973.1, 2975.5, 2977.4, 2979.5, 2981.4, 2983.5, 2985.5, 2988.0, 2990.2, 2992.4, 2994.5, 2998.4, 3000.1, 3002.2, 3004.5, 3007.0, 3008.6, 3010.9, 3013.3, 3015.8, 3017.5, 3019.1, 3021.1, 3023.5, 3025.5, 3027.8, 3029.6, 3030.7, 3033.6, 3035.9, 3038.1, 3040.4, 3042.4, 3046.1, 3048.6, 3050.9, 3053.4, 3055.2, 3057.3, 3059.2, 3061.3, 3063.1, 3065.5, 3067.7, 3069.6, 3071.9, 3074.3, 3076.4, 3078.2, 3080.2, 3082.2, 3084.0, 3086.9, 3089.5, 3092.9, 3095.6, 3098.2, 3100.8, 3103.1, 3106.6, 3108.5, 3110.5, 3113.1, 3115.6, 3121.1, 3124.1, 3127.0, 3129.7, 3132.6, 3134.2, 3136.4, 3138.8, 3141.6, 3144.1, 3146.2, 3149.5, 3152.2, 3154.6, 3157.2, 3159.6)
VO2_data_50W <- c(4.4001, 4.3817, 4.3121, 4.3409, 4.3439, 4.3299, 4.2480, 4.1318, 4.1017, 4.0326, 3.9826, 3.9325, 3.8651, 3.8096, 3.7446, 3.6772, 3.6132, 3.5336, 3.4854, 3.4446, 3.3776, 3.3045, 3.2331, 3.1704, 3.0984, 3.0216, 2.9686, 2.9386, 2.8810, 2.8061, 2.7353, 2.7127, 2.7239, 2.6456, 2.6377, 2.5957, 2.5540, 2.5138, 2.4619, 2.4145, 2.4251, 2.3901, 2.3788, 2.3462, 2.2943, 2.2786, 2.2648, 2.2418, 2.2427, 2.2392, 2.2386, 2.1912, 2.1595, 2.1360, 2.1111, 2.1224, 2.0777, 2.0514, 2.0310, 1.9780, 1.9727, 1.9440, 1.9551, 1.9516, 1.9462, 1.9169, 1.8937, 1.8818, 1.8560, 1.8333, 1.8018, 1.8064, 1.8136, 1.7820, 1.7528, 1.7488, 1.7494, 1.7520, 1.7599, 1.7941, 1.7951, 1.8142, 1.8182, 1.8387, 1.8880, 1.8747, 1.8848, 1.8750, 1.8730, 1.8576, 1.8532, 1.8552, 1.8566, 1.8779, 1.9174, 1.9636, 1.9640, 1.9728, 1.9767, 2.0114, 1.9866, 2.0298, 2.0401, 2.0414, 2.0417, 2.0099, 2.0261, 1.9837, 1.9544, 1.9402, 1.9313, 1.9273, 1.9265, 1.9295, 1.9441, 1.9727, 1.9943, 2.0044, 1.9720, 1.9654, 1.9225, 1.9068, 1.8688, 1.8623, 1.8394, 1.8563, 1.8187, 1.7995, 1.7750, 1.7498, 1.7746, 1.7715, 1.8122, 1.8389, 1.8352, 1.8090, 1.8296, 1.8238, 1.8328, 1.8290, 1.8123, 1.7960, 1.7923, 1.7896, 1.7622, 1.7592, 1.7674, 1.7858, 1.7950, 1.8137, 1.8496, 1.8495, 1.8664, 1.8851, 1.8865, 1.8747, 1.8502, 1.8631, 1.8322, 1.8341, 1.8650, 1.8490, 1.8762, 1.8531, 1.8437, 1.8368, 1.8438, 1.8350, 1.8540, 1.8645, 1.8486, 1.8179, 1.8006, 1.7843, 1.7765, 1.7372, 1.7319, 1.7322, 1.7202, 1.7160, 1.7033, 1.6818, 1.6498, 1.6551, 1.6361, 1.6277, 1.6271, 1.6044, 1.6204, 1.6176, 1.5965, 1.6116, 1.5948, 1.5813, 1.6099, 1.6333, 1.6588, 1.6799, 1.6902, 1.6858, 1.6819, 1.6689, 1.6550, 1.6356, 1.6488, 1.6722, 1.6864, 1.6533, 1.6580, 1.6782, 1.6916, 1.6921, 1.6927, 1.6946, 1.7046, 1.7356, 1.6985, 1.7132, 1.7104, 1.6868, 1.6894, 1.6880, 1.6834, 1.6632, 1.6246, 1.6189, 1.6194, 1.6530, 1.6906, 1.6982, 1.6821, 1.6484, 1.7026, 1.7012, 1.6998, 1.6902, 1.6894, 1.6715, 1.5961, 1.6080, 1.5906, 1.5955, 1.5864, 1.6033, 1.5882, 1.5746, 1.5551, 1.5417, 1.5668, 1.6209, 1.6475, 1.6627, 1.6290, 1.6070, 1.5852, 1.5877, 1.6354, 1.5954, 1.5910, 1.5767, 1.5835, 1.6019, 1.6368, 1.6969, 1.6874, 1.6751, 1.6753, 1.6987, 1.6867, 1.6964, 1.7220, 1.7142, 1.7196, 1.7078, 1.6907, 1.6628, 1.6343, 1.6318, 1.6129, 1.6256, 1.6123, 1.6096, 1.6335, 1.6262, 1.6195, 1.6204, 1.5709, 1.5486, 1.5559, 1.5600, 1.5710, 1.5819, 1.5609, 1.5808, 1.5985, 1.5951, 1.6267, 1.6258, 1.5771, 1.5974, 1.6163, 1.6230, 1.6052)

# Normalisierung der t_data Werte auf 0
t_data <- t_data - t_data[1]
t_data_50W <- t_data_50W - t_data_50W[1]

# Modellfunktion
model_function <- function(t_s, A, TauA, B, TauB, C, t_delay) {
  A * exp(-(t_s - t_delay) / TauA) + B * exp(-(t_s - t_delay) / TauB) + C
}

# UI
ui <- fluidPage(
  useShinyjs(),
  tags$head(
    tags$style(HTML("
      .reduced-margin { margin-bottom: 5px !important; }
      .radio-buttons-compact { margin-top: -20px; }
    "))
  ),
  titlePanel("EPOC-Modellfunktion"),
  fluidRow(
    column(3,
           style = "height: 90vh; overflow-y: auto;",
           tags$h4(tags$strong("Modellparameter:")),
           sliderInput("A", "A", min = 0.0, max = 6, value = 2.2, step = 0.01),
           sliderInput("TauA", "TauA", min = 5, max = 90, value = 35, step = 0.10),
           sliderInput("B", "B", min = 0.0, max = 5, value = 0.8, step = 0.01),
           sliderInput("TauB", "TauB", min = 0.0, max = 1800, value = 180, step = 0.10),
           sliderInput("C", "C", min = 0.0, max = 3.0, value = 0.30, step = 0.01),
           sliderInput("O2_Store", "O2-Speicher [l]", min = 0, max = 1, value = 0.4, step = 0.01),
           sliderInput("t_delay", "Zeitverzögerung [s]", min = 0, max = 300, value = 0, step = 1),
           sliderInput("VO2_Ruhe", "VO2 Ruhe [l · min^-1]", min = 0.0, max = 1.0, value = 0.3, step = 0.001),
           sliderInput("VO2_Referenz", "VO2 Referenz (50 Watt) [l · min^-1]", min = 0.0, max = 2.0, value = 1.0, step = 0.001),
           br(), 
           tags$h4(tags$strong("Beispieldaten einfügen:")),
           actionButton("show_data_ohne", "ohne Nachbelastung"),
           br(), 
           actionButton("show_data_50W", "50 Watt Nachbelastung"),
           br(), br(),
           fileInput("file_upload", "CSV-Datei hochladen", accept = ".csv"),
           tags$h4(tags$strong("Modelanpassung:")),
           actionButton("fit_all", "nlsLM - Fit"),
           tags$h4(class = "reduced-margin", "Optionen:"),
           div(class = "radio-buttons-compact",
               radioButtons("fit_mit", "", 
                            choices = c("mit VO2 Ruhe" = "ruhe", "mit VO2 Referenz" = "referenz"),
                            selected = "referenz")
           ),
           div(class = "radio-buttons-compact",
               radioButtons("fit_steps", "", 
                            choices = c("3 Schritte" = "three_steps", "1 Schritt" = "one_step"),
                            selected = "three_steps")
           ),
           h4("Schrittweise:"),
           actionButton("fit_tau", "1. Fit: Tau"), br(),
           actionButton("fit_slow", "2. Fit: EPOC Slow"), br(),
           actionButton("fit_full", "3. Fit: EPOC Fast"),
           br(), br(),
           sliderInput("ruhe_sim_range", "Zeitraum der simulierten Ruhewerte [s]:",
                       min = 1200, max = 7200, value = c(3600, 4200), step = 100),
           actionButton("toggle_view", "Ruhe_sim anzeigen"),
           br(), br(),
           tags$h4(tags$strong("Berechnung - Ruheumsatz:")),
           radioButtons("geschlecht", "Geschlecht:", choices = c("Männlich", "Weiblich")),
           sliderInput("koerpermasse", "Körpermasse [kg]:", min = 40, max = 150, value = 90),
           sliderInput("koerperlaenge", "Körperlänge [cm]:", min = 140, max = 220, value = 193),
           sliderInput("alter", "Alter [Jahre]:", min = 18, max = 100, value = 27),
           sliderInput("rq", "RQ:", min = 0.7, max = 1.0, value = 0.77, step = 0.01),
           actionButton("berechne_vo2_ruhe", "VO2 Ruhe berechnen")
    ),
    column(8,
           fluidRow(
             column(12, plotlyOutput("plot"))
           ),
           fluidRow(
             column(12, htmlOutput("instructions"))
           )
    )
  )
)

server <- function(input, output, session) {
  show_data <- reactiveVal(FALSE)
  current_data <- reactiveVal(NULL)
  uploaded_data <- reactiveVal(NULL)
  tau_estimate <- reactiveVal(NULL)
  slow_estimates <- reactiveVal(NULL)
  show_full_view <- reactiveVal(FALSE)
  max_ruhe_t_s <- reactiveVal(NULL)
  ruhe_sim <- reactiveVal(NULL)
  fit_mode <- reactive({
    input$fit_steps
  })
  
  observeEvent(input$show_data_ohne, {
    show_data(TRUE)
    current_data(data.frame(t_s = t_data, VO2_t = VO2_data))
  })
  
  observeEvent(input$show_data_50W, {
    show_data(TRUE)
    current_data(data.frame(t_s = t_data_50W, VO2_t = VO2_data_50W))
  })
  
  observeEvent(input$file_upload, {
    req(input$file_upload)
    df <- read.csv(input$file_upload$datapath)
    
    if ("t_s" %in% names(df) && "VO2_t" %in% names(df)) {
      if (df$t_s[1] != 0.0) {
        df$t_s <- df$t_s - df$t_s[1]
      }
      
      uploaded_data(df)
      current_data(df)
      show_data(TRUE)
    } else {
      showModal(modalDialog(
        title = "Invalid CSV",
        "Die CSV-Datei muss 't_s' und 'VO2_t' als Spaltennamen beinhalten.",
        easyClose = TRUE,
        footer = NULL
      ))
    }
  })
  
  # Funktion zur Berechnung des Grundumsatzes
  berechne_grundumsatz <- function(geschlecht, masse, laenge, alter) {
    if (geschlecht == "Männlich") {
      return(66.5 + (13.75 * masse) + (5.003 * laenge) - (6.775 * alter))
    } else {
      return(655.1 + (9.563 * masse) + (1.850 * laenge) - (4.676 * alter))
    }
  }
  
  # Funktion zur Berechnung des RMR
  berechne_rmr <- function(grundumsatz, rq, geschlecht) {
    ka <- 19.946  # Annahme für RQ = 0.77, passen Sie dies an, wenn nötig
    faktor <- if(geschlecht == "Männlich") 1.287 else 1.278
    return((grundumsatz / (24 * 60 * ka)) * 4.1868 * faktor)
  }
  
  # Reaktion auf den Klick des "VO2,Ruhe berechnen" Buttons
  observeEvent(input$berechne_vo2_ruhe, {
    grundumsatz <- berechne_grundumsatz(
      input$geschlecht,
      input$koerpermasse,
      input$koerperlaenge,
      input$alter
    )
    
    rmr <- berechne_rmr(grundumsatz, input$rq, input$geschlecht)
    
    # Aktualisieren Sie den VO2_Ruhe Slider mit dem berechneten Wert
    updateSliderInput(session, "VO2_Ruhe", value = round(rmr, 3))
    
    # Zeigen Sie eine Benachrichtigung mit dem berechneten Wert an
    showNotification(paste("Berechnete Ruhesauerstoffaufnahme:", round(rmr, 3), "l/min"), type = "message")
  })
  
  observeEvent(input$fit_tau, {
    if (fit_mode() == "three_steps" && show_data()) {
      Beispieldaten <- current_data()
      if (is.null(Beispieldaten)) return(p)
      
      t_delay <- isolate(input$t_delay)
      C <- isolate(input$VO2_Ruhe)
      
      # Datenfilterung und Zeitverschiebung
      filtered_data <- Beispieldaten %>%
        filter(t_s >= t_delay) %>%
        mutate(t_s = t_s - t_delay)
      
      model_tau <- nlsLM(VO2_t ~ x * exp(-t_s/Tau) + C, 
                         data = filtered_data,
                         start = list(x = max(filtered_data$VO2_t), Tau = 45, C = C),
                         lower = c(x = 0, Tau = 10, C = 0),
                         upper = c(x = Inf, Tau = 600, C = Inf),
                         control = nls.lm.control(maxiter = 1024, ftol = 1e-10, ptol = 1e-10))
      
      tau_estimate(round(as.list(coef(model_tau))$Tau, 1))
      
      updateSliderInput(session, "TauA", value = tau_estimate())
      updateSliderInput(session, "A", value = as.list(coef(model_tau))$x)
      updateSliderInput(session, "C", value = as.list(coef(model_tau))$C)
      
      # Set B and TauB sliders to 0
      updateSliderInput(session, "B", value = 0)
      updateSliderInput(session, "TauB", value = 0)
    }
  })
  
  observeEvent(input$fit_slow, {
    if (fit_mode() == "three_steps") {
      req(tau_estimate())
      if (show_data()) {
        Beispieldaten <- current_data()
        
        VO2_Basis <- if(input$fit_mit == "ruhe") input$VO2_Ruhe else input$VO2_Referenz
        t_delay <- isolate(input$t_delay)
        max_VO2 <- max(Beispieldaten$VO2_t) * 1.1
        
        tau2 <- 2 * tau_estimate()
        tau8 <- 8 * tau_estimate()
        last_data_point <- max(Beispieldaten$t_s)
        
        actual_data_count <- sum(Beispieldaten$t_s >= tau2)
        
        ruhe_sim_start <- input$ruhe_sim_range[1]
        ruhe_sim_end <- input$ruhe_sim_range[2]
        
        simulated_time_points <- seq(ruhe_sim_start, ruhe_sim_end, length.out = actual_data_count)
        
        ruhe_sim_data <- data.frame(
          t_s = simulated_time_points,
          VO2_t = rep(VO2_Basis, actual_data_count)  # Hier VO2_Basis statt VO2_Ruhe verwenden
        )
        
        ruhe_sim(ruhe_sim_data)
        max_ruhe_t_s(max(ruhe_sim_data$t_s))
        
        Beispieldaten_extended <- rbind(Beispieldaten, ruhe_sim_data)
        
        filtered_data <- Beispieldaten_extended %>% 
          filter(t_s >= t_delay) %>%
          mutate(t_s = t_s - t_delay) %>%
          filter(t_s >= tau2)
        
        model_slow <- nlsLM(VO2_t ~ B * exp(-t_s/TauB) + VO2_Basis,
                            data = filtered_data,
                            start = list(B = 0.5, TauB = 540),
                            lower = c(B = 0.1, TauB = 90),
                            upper = c(B = (max_VO2 * 0.5), TauB = 3600),
                            control = nls.lm.control(maxiter = 1024, ftol = 1e-10, ptol = 1e-10))
        
        slow_estimates_list <- list(
          B = as.numeric(coef(model_slow)["B"]),
          TauB = round(as.numeric(coef(model_slow)["TauB"]), 1),
          C = VO2_Basis
        )
        
        slow_estimates(slow_estimates_list)
        
        updateSliderInput(session, "B", value = slow_estimates_list$B)
        updateSliderInput(session, "TauB", value = slow_estimates_list$TauB)
        updateSliderInput(session, "C", value = VO2_Basis)  # Hier VO2_Basis statt VO2_Ruhe verwenden
      }
    }
  })
  
  observeEvent(input$fit_full, {
    if (fit_mode() == "three_steps") {
      req(tau_estimate(), slow_estimates())
      if (show_data()) {
        Beispieldaten <- current_data()
        
        slow_est <- slow_estimates()
        t_delay <- isolate(input$t_delay)
        ruhe_sim_start <- input$ruhe_sim_range[1]
        
        if (is.null(tau_estimate()) || is.null(slow_est)) {
          showNotification("Einige Schätzwerte fehlen. Bitte führen Sie Schritt 1 und 2 erneut aus.", type = "error")
          return()
        }
        
        start_params <- list(
          A = isolate(input$A),
          TauA = tau_estimate()
        )
        
        # Definiere eine Funktion mit festen Werten für B, TauB und C
        model_func <- function(t_s, A, TauA) {
          A * exp(-t_s/TauA) + slow_est$B * exp(-t_s/slow_est$TauB) + slow_est$C
        }
        
        # Berechne 2tau
        tau2 <- 2 * tau_estimate()
        
        # Datenfilterung und Zeitverschiebung
        Beispieldaten_gefiltert <- Beispieldaten %>%
          filter(t_s >= t_delay) %>%
          mutate(t_s = t_s - t_delay) %>%
          filter(t_s < (ruhe_sim_start - t_delay))  # Entferne simulierte Ruhewerte
        
        # Erstelle Gewichte basierend auf t_s
        weights <- ifelse(Beispieldaten_gefiltert$t_s <= tau2, 1, 1)
        
        tryCatch({
          model_full <- nlsLM(VO2_t ~ model_func(t_s, A, TauA),
                              data = Beispieldaten_gefiltert,
                              start = list(A = 2.5, TauA = 42),
                              lower = c(A = 1.0, TauA = 15),
                              upper = c(A = 4.0, TauA = 90),
                              weights = weights,
                              control = nls.lm.control(maxiter = 1024, ftol = 1e-10, ptol = 1e-10))
          
          full_estimates <- list(
            A = as.numeric(coef(model_full)["A"]),
            TauA = round(as.numeric(coef(model_full)["TauA"]), 1)
          )
          
          updateSliderInput(session, "A", value = full_estimates$A)
          updateSliderInput(session, "TauA", value = full_estimates$TauA)
          
          showNotification("Fitting erfolgreich abgeschlossen", type = "message")
        }, error = function(e) {
          showNotification(paste("Fehler beim Fitting:", e$message), type = "error")
        })
      }
    }
  })
  
  observeEvent(input$toggle_view, {
    show_full_view(!show_full_view())
  })
  
  observeEvent(input$fit_all, {
    if (show_data()) {
      if (fit_mode() == "three_steps") {
        # Trigger fit_tau
        shinyjs::click("fit_tau")
        
        # Warte kurz, bevor der nächste Fit ausgeführt wird
        Sys.sleep(0.5)
        
        # Trigger fit_slow
        shinyjs::click("fit_slow")
        
        # Warte kurz, bevor der nächste Fit ausgeführt wird
        Sys.sleep(0.5)
        
        # Trigger fit_full
        shinyjs::click("fit_full")
        
        showNotification("Alle Fits wurden nacheinander durchgeführt.", type = "message")
      } else if (fit_mode() == "one_step") {
        Beispieldaten <- current_data()
        
        t_delay <- isolate(input$t_delay)
        C <- if(input$fit_mit == "ruhe") isolate(input$VO2_Ruhe) else isolate(input$VO2_Referenz)
        
        best_fit <- NULL
        best_rss <- Inf
        
        withProgress(message = 'Fitting in progress', value = 0, {
          for (i in 1:100) {
            # Randomisierte Startwerte
            A_start <- runif(1, 1.5, 6)
            TauA_start <- runif(1, 20, 90)
            B_start <- runif(1, 0.3, 1.0)
            TauB_start <- runif(1, 300, 900)
            
            start_values <- list(A = A_start, TauA = TauA_start, B = B_start, TauB = TauB_start)
            
            model_equation <- VO2_t ~ A * exp(-(t_s - t_delay) / TauA) + B * exp(-(t_s - t_delay) / TauB) + C
            
            fit <- try(nlsLM(model_equation,
                             data = Beispieldaten,
                             start = start_values,
                             lower = c(A = 1.5, TauA = 20, B = 0.3, TauB = 90),
                             upper = c(A = 6, TauA = 90, B = 3.0, TauB = 900),
                             control = nls.control(maxiter = 1024)), silent = TRUE)
            
            if (!inherits(fit, "try-error")) {
              rss <- sum(residuals(fit)^2)
              if (rss < best_rss) {
                best_rss <- rss
                best_fit <- fit
              }
            }
            
            incProgress(1/100, detail = paste("Iteration", i))
          }
        })
        
        if (!is.null(best_fit)) {
          params <- as.list(coef(best_fit))
          updateSliderInput(session, "A", value = params$A)
          updateSliderInput(session, "TauA", value = params$TauA)
          updateSliderInput(session, "B", value = params$B)
          updateSliderInput(session, "TauB", value = params$TauB)
          
          showNotification("Fitting completed successfully!", type = "message")
        } else {
          showModal(modalDialog(
            title = "nlsLM fehlgeschlagen",
            "Die nicht-lineare Regression mittels Levenberg-Marquardt-Algorithmus konnte nicht erfolgreich durchgeführt werden.",
            easyClose = TRUE,
            footer = NULL
          ))
        }
      }
    } else {
      showNotification("Bitte fügen Sie zuerst Daten ein.", type = "warning")
    }
  })
  
  output$plot <- renderPlotly({
    A <- input$A
    TauA <- input$TauA
    B <- input$B
    TauB <- input$TauB
    C <- input$C
    O2_Store <- input$O2_Store
    t_delay <- input$t_delay
    VO2_Basis <- if(input$fit_mit == "ruhe") input$VO2_Ruhe else input$VO2_Referenz
    
    # Bestimmen des x-Achsen-Bereichs
    x_range <- if (show_full_view()) {
      c(0, max_ruhe_t_s())
    } else {
      max_x_value <- max(600, if (!is.null(current_data())) max(current_data()$t_s) else 600)
      c(0, max_x_value * 1.1)  # Erhöhung um 10%
    }
    
    max_x <- max(max_ruhe_t_s(), 600 + 0.5 * TauB, max(t_data))
    
    Beispieldaten <- current_data()
    
    if (!is.null(current_data())) {
      max_y <- max((A + B + C) * 1.1, max(current_data()$VO2_t) * 1.1)
    } else {
      max_y <- (A + B + C) * 1.1
    }
    
    t_s <- seq(0, max_x, by = 1)
    
    model_values <- A * exp(-t_s / TauA) + B * exp(-t_s / TauB) + C
    model_fast <- A * exp(-t_s / TauA)
    model_slow <- B * exp(-t_s / TauB)
    model_ruhe <- rep(C, length(t_s))
    
    model_fast_func <- function(t_s) A * exp(-t_s / TauA)
    integrated_model_fast <- integrate(model_fast_func, lower = 0, upper = max(t_s))
    
    VO2_fast <- integrated_model_fast$value / 60
    CE_max <- 21.1307796
    WPCR <- VO2_fast * CE_max
    WPCR_corrected <- ifelse(VO2_fast < O2_Store, 0, (VO2_fast * CE_max) - (O2_Store * CE_max))
    
    cumulative_area <- cumsum(A * exp(-t_s / TauA)) * diff(t_s)[1]
    O2_Store_index <- which.min(abs(cumulative_area - O2_Store * 60))
    O2_Store_x <- t_s[O2_Store_index]
    
    last_data_point <- if (!is.null(current_data())) max(current_data()$t_s) else 0
    
    eq_text <- sprintf("V̇O₂ (t) = %.2f * e<sup>-t / %.1f</sup> + %.2f * e<sup>-t / %.1f</sup> + %.2f", 
                       A, TauA, B, TauB, C)
    
    p <- plot_ly() %>%
      add_trace(x = ~t_s, y = ~model_values, type = 'scatter', mode = 'lines', 
                name = 'Modellfunktion', line = list(color = '#EF6F6A')) %>%
      add_trace(x = ~t_s, y = ~model_fast, type = 'scatter', mode = 'lines', 
                name = 'EPOC<sub>fast</sub>', line = list(color = '#42BA97')) %>%
      add_trace(x = ~t_s, y = ~model_slow, type = 'scatter', mode = 'lines', 
                name = 'EPOC<sub>slow</sub>', line = list(color = '#BB7693')) %>%
      add_trace(x = ~t_s, y = ~model_ruhe, type = 'scatter', mode = 'lines', 
                name = 'C', line = list(color = '#1CADE4')) %>%
      add_ribbons(x = ~t_s, ymin = 0, ymax = ~model_fast, 
                  name = 'EPOC<sub>fast,Integriert</sub>', fillcolor = 'rgba(66,186,151,0.5)', 
                  line = list(color = "rgba(0,0,0,0)")) %>%
      add_ribbons(x = ~t_s, ymin = 0, ymax = ~model_fast, 
                  data = data.frame(t_s = t_s[1:O2_Store_index], model_fast = model_fast[1:O2_Store_index]),
                  fillcolor = 'rgba(0,131,143,0.3)', line = list(color = "rgba(0,0,0,0)", dash = "dash"), 
                  name = 'O<sub>2</sub>-Speicher') %>%
      add_trace(x = c(O2_Store_x, O2_Store_x), y = c(0, max(model_fast[O2_Store_index])),
                type = 'scatter', mode = 'lines', 
                line = list(color = "#00838F", width = 1, dash = "dash"),
                name = 'O2 Store Linie', showlegend = FALSE) %>%
      add_segments(x = 2 * TauA, xend = 2 * TauA, y = 0, yend = max_y,
                   line = list(color = "gray", width = 0.5, dash = "dash"),
                   showlegend = FALSE) %>%
      layout(title = "EPOC-Modellfunktion",
             margin = list(t = 40),
             xaxis = list(title = "Zeit [s]", range = x_range, autorange = FALSE),
             yaxis = list(title = "V̇O<sub>2</sub>(t) [l·min<sup>-1</sup>]", range = c(0, max_y)),
             legend = list(
               x = 0.70,
               y = 0.99,
               xanchor = "left",
               yanchor = "top",
               bgcolor = "rgba(255, 255, 255, 0.3)",
               bordercolor = "rgba(0,0,0,0)",
               borderwidth = 0
             ),
             annotations = list(
               list(
                 x = 2 * TauA, y = max_y * 0.70, text = sprintf("2tau: %.1f s", 2 * TauA), showarrow = FALSE, xanchor = "left", yanchor = "bottom",
                 textangle = -90, font = list(size = 11, color = "darkgrey")
               ),
               list(
                 x = max_x * 0.03, 
                 y = max_y * 0.80,
                 text = paste("W<sub>PCR</sub>:", round(WPCR, 2), "kJ"),
                 showarrow = FALSE,
                 xanchor = 'left',
                 yanchor = 'bottom',
                 font = list(
                   size = 12,
                   color = "black"
                 )
               ),
               list(
                 x = max_x * 0.03, 
                 y = max_y * 0.70,
                 text = paste("W<sub>PCR, korrigiert</sub>:", round(WPCR_corrected, 2), "kJ"),
                 showarrow = FALSE,
                 xanchor = 'left',
                 yanchor = 'bottom',
                 font = list(
                   size = 12,
                   color = "black"
                 )
               ),
               list(
                 x = max_x * 0.03, 
                 y = max_y * 0.90,
                 text = eq_text,
                 showarrow = FALSE,
                 xanchor = 'left',
                 yanchor = 'bottom',
                 font = list(
                   size = 12,
                   color = "black"
                 )
               )
             ))
    
    if (show_data()) {
      Beispieldaten <- current_data()
      if (!is.null(Beispieldaten)) {
        ruhe_sim_start <- input$ruhe_sim_range[1]
        
        # Datenfilterung und Zeitverschiebung
        Beispieldaten <- Beispieldaten %>%
          filter(t_s >= t_delay) %>%
          mutate(t_s = t_s - t_delay) %>%
          filter(t_s < (ruhe_sim_start - t_delay))  # Entferne simulierte Ruhewerte
        
        last_data_point <- max(Beispieldaten$t_s)
        
        # Füge last_data_point Linie und Annotation hinzu
        p <- p %>% add_segments(x = last_data_point, xend = last_data_point, y = 0, yend = max_y,
                                line = list(color = "gray", width = 0.5, dash = "dash"),
                                showlegend = FALSE)
        
        p$x$layout$annotations <- c(p$x$layout$annotations,
                                    list(
                                      list(
                                        x = last_data_point, y = max_y * 0.70, text = sprintf("t<sub>data_last</sub>: %.1f s", last_data_point), showarrow = FALSE, xanchor = "left", yanchor = "bottom",
                                        textangle = -90, font = list(size = 11, color = "darkgrey")
                                      )
                                    ))
        
        model_values_at_data <- A * exp(-Beispieldaten$t_s / TauA) + B * exp(-Beispieldaten$t_s / TauB) + C
        
        data_subset <- Beispieldaten
        
        ss_res <- sum((data_subset$VO2_t - model_values_at_data)^2, na.rm = TRUE)
        ss_tot <- sum((data_subset$VO2_t - mean(data_subset$VO2_t, na.rm = TRUE))^2, na.rm = TRUE)
        r_squared <- 1 - (ss_res / ss_tot)
        
        p <- p %>%
          add_trace(data = Beispieldaten, x = ~t_s, y = ~VO2_t, type = 'scatter', mode = 'markers+lines',
                    name = 'V̇O<sub>2</sub>', 
                    marker = list(color = 'rgba(38, 131, 198, 0.9)', size = 5.0),
                    line = list(color = 'rgba(38, 131, 198, 1.0)', width = 0.65, dash = '4 4'))
        
        if (show_full_view()) {
          ruhe_sim <- data.frame(
            t_s = seq(input$ruhe_sim_range[1], input$ruhe_sim_range[2], by = 1),
            VO2_t = rep(VO2_Basis, input$ruhe_sim_range[2] - input$ruhe_sim_range[1] + 1)
          )
          
          p <- p %>%
            add_trace(data = ruhe_sim, x = ~t_s, y = ~VO2_t, type = 'scatter', mode = 'markers+lines',
                      name = 'Sim. Ruhewerte', 
                      marker = list(color = '#1CADE4', size = 3.0),
                      line = list(color = '#1CADE4', width = 0.5, dash = '4 4'))
        }
        
        p$x$layout$annotations <- c(p$x$layout$annotations,
                                    list(
                                      list(
                                        x = max_x * 0.03,
                                        y = max_y * 0.60,
                                        text = sprintf("R²: %.3f", r_squared),
                                        showarrow = FALSE,
                                        xanchor = 'left',
                                        yanchor = 'bottom',
                                        font = list(
                                          family = "Arial, sans-serif",
                                          size = 12,
                                          color = "black"
                                        )
                                      )
                                    ))
      }
    }
    
    p
  })
  
  output$instructions <- renderUI({
    HTML(
      "<div style='margin-top: 20px; padding: 10px; background-color: #f0f0f0; border: 1px solid #ddd; border-radius: 5px;'>
    <h4 style='color: #333;'><strong>Anleitung - Modellanpassung:</strong></h4>
    <ol style='color: #555;'>
      <li>Beispiel-VO2-Daten (mit oder ohne Nachbelastung) einfügen oder eigene VO2-Daten als CSV-Datei hochladen.</li>
      <li>Ruhesauerstoffaufnahme (VO2 Ruhe) manuell eingeben oder anhand der Parameter (Geschlecht, Körpermasse, Alter, RQ) berechnen lassen.</li>
      <li>Bei Daten ohne Nachbelastung 'Mit VO2 Ruhe' wählen, bei Daten mit Nachbelastung 'VO2 Referenz' wählen und den entsprechenden Referenzwert festlegen.</li>
      <li>O2-Speicher festlegen oder auf 0 setzen, falls dieser in der Berechnung nicht berücksichtigt werden soll.</li>
      <li>Zeitverzögerung festlegen, um den Startpunkt der Modellanpassung zu bestimmen.</li>
      <li>Wählen Sie zwischen 3-Schritt- oder 1-Schritt-Modellanpassung. Bei 3-Schritt-Anpassung den Zeitraum für simulierte Ruhe- bzw. Referenzwerte mit dem Slider einstellen.</li>
      <li>Modellanpassung durchführen:</li>
      <ul>
        <li>'Fit: nlsLM' für komplette Anpassung oder</li>
        <li>Schrittweise: '1. Fit: Tau', '2. Fit: EPOC Slow', '3. Fit: EPOC Fast'</li>
      </ul>
      <li>Mit 'Ruhe_sim anzeigen' können simulierte Ruhewerte in der Abbildung ein- oder ausgeblendet werden.</li>
      <li>Alternative: Manuelle Anpassung der Modellparameter über die Schieberegler.</li>
    </ol>
    </div>"
    )
  })
}

shinyApp(ui = ui, server = server)
```

::: {.callout-note icon=false collapse=true appearance="simple"}
### Modellanpassung - Details:

**A. Dreischritt-Modellanpassung:**

1. Schnelle Komponente (1. Fit: Tau):
   - Verwendete Funktion: nlsLM
   - Parameter: x (entspricht A), Tau (entspricht TauA)
   - Modell: VO2_t ~ x · exp(-t_s/Tau) + C
   - Grenzen:
     - x: *0 bis Inf*
     - Tau: *10 bis 600 s*
   - Optimierung: Minimierung der Residuenquadratsumme (RSS)

2. Langsame Komponente (2. Fit: EPOC Slow):
   - Verwendete Funktion: nlsLM
   - Parameter: B, TauB
   - Modell: VO2_t ~ B · exp(-t_s/TauB) + VO2_Basis
   - Grenzen:
     - B: *0.1 bis (VO2_max · 0.5) l/min*
     - TauB: *90 bis 3600 s*
   - Prozess:
     a) Datenauswahl: Verwendung der Daten ab *2 · Tau*
     b) Erweiterung der Daten mit simulierten Ruhe- oder Referenzwerten:
        - Zeitraum: *Festgelegter Bereich der simulierten Werte (Standard: 3600-4200s)*
        - Anzahl der simulierten Werte: *Gleiche Anzahl wie reale Datenpunkte ab dem Zeitpunkt 2 · Tau bis zum Start der simulierten Werte*
        - Wert: *Konstant auf VO2_Ruhe oder VO2_Referenz (je nach Auswahl)*
   - Optimierung: Minimierung der RSS

3. Vollständige Anpassung (3. Fit: EPOC Fast):
   - Verwendete Funktion: nlsLM
   - Parameter: A, TauA
   - Modell: VO2_t ~ A · exp(-t_s/TauA) + B · exp(-t_s/TauB) + C
     (B, TauB und C aus vorherigen Modellanpassungen)
   - Grenzen:
     - A: *1.0 bis 4.0 l/min*
     - TauA: *15 bis 90 s*
   - Prozess:
     a) Datenauswahl: Verwendung der Daten bis zum Beginn der simulierten Ruhe- oder Referenzwerte
   - Optimierung: Minimierung der RSS

**B. Einschritt-Modellanpassung:**

- Verwendete Funktion: nlsLM
- Parameter: A, TauA, B, TauB
- Modell: VO2_t ~ A · exp(-(t_s - t_delay) / TauA) + B · exp(-(t_s - t_delay) / TauB) + C
- Grenzen:
  - A: *1.5 bis 6.0 l/min*
  - TauA: *20 bis 90 s*
  - B: *0.3 bis 3.0 l/min*
  - TauB: *90 bis 900 s*
- Prozess: *100 Iterationen* mit zufälligen Startwerten
- Optimierung: Minimierung der RSS
- Keine Verwendung von simulierten Ruhe- oder Referenzwerten

:::


## Berechnung von W~PCR~

Für die Quantifizierung der EPOC-Sauerstoffmenge EPOC~PCr~, die der Rephosphorylierung von
Phosphokreatin (PCr) zugeordnet wird, erfolgt zunächst die Integration des
Funktionsterms der schnellen EPOC-Komponente $\dot{V}O_{2EPOC, \text{fast}}\,(t)$ vom Zeitpunkt des Belastungsendes
bzw. dem Start der Nachbelastung (NB~Start~) bis zum Endzeitpunkt der
Nachbelastung (NB~Ende~), um EPOC~fast~ zu bestimmen [@Dunst2019].

$$
EPOC_{fast}\,[l] = \int\limits_{NB_{Start}}^{NB_{Ende}}A_{fast} \cdot e^{-(t / \tau_{fast})} \, dt
$$ {#eq-VO2EPOCFAST}

Um die tatsächliche O~2~-Menge zu berechnen, die der Wiederherstellung von PCr
zuzuordnen ist, muss der Anteil des von den Muskeln
verstoffwechselten O~2~, der durch die Erschöpfung der körpereigenen
O~2~-Speicher gedeckt wurde, von EPOC~fast~ subtrahiert werden
[@Francescato2003; @Beneke2002]. Die Rolle der körpereigenen
O~2~-Speicher sowie deren Berechnung wird im folgenden Kapitel beschrieben.


$$
EPOC_{PCr}\,[l] = EPOC_{fast}\,[l] - O_{2}\text{-Speicher}\,[l]
$$ {#eq-EPOCPCR}

Die bestimmte EPOC~PCr~ repräsentiert daher die korrigierte Sauerstoffmenge, die zur Resynthese des bei Belastungsstart gespaltenen PCr benötigt wurde.
Die während der Belastung anaerob alaktazid bereitgestellte Energiemenge kann sowohl ohne (W~PCr~) als auch mit Einbeziehung der körpereigenen O~2~-Speicher (W~PCr,corrected~) berechnet werden. In beiden Fällen wird der entsprechende EPOC-Wert (EPOC~fast~ bzw. EPOC~PCr~) mit dem kalorischen Äquivalent für Kohlenhydrate (kÄ~KH~) von 21.131 kJ pro Liter O~2~ [@Stegemann1991, 59] multipliziert [@Beneke2002; @Beneke2004; @Knuttgen1970; @Roberts1978].

$$
W_{PCr}\,[kJ] = EPOC_{fast}\,[l] \cdot kÄ_{KH}\,[kJ\cdot l^{-1}] \\
W_{PCr,corrected}\,[kJ] = EPOC_{PCr}\,[l] \cdot kÄ_{KH}\,[kJ\cdot l^{-1}] \\
$$ {#eq-WPCR}


# Berechnung der O~2~-Speicher

```{r}
#### FRANCESCATO2003 !!!!
#It should be also pointed out that the true O2 deficit can not be repaid during the exercise (for a review see \[24\]), a fact that is also supported by the essential identity of the gross O2 deficit incurred at work onset and of the gross O2 debt paid at work offset (see Results).@Francescato2003!!!!!!!!!!!!!!!!!!!!!**

## Aus DiPrampero1983
#SIND O~2~-Speicher nur relevant wenn Belastung aus Ruhezustand und nicht nach Vorbelastung auch wenn es nur 50 Watt sind?  --> AUFGRUND DER VORBELASTUNG DIE NIEDRIGERERN WERTE ERKLÄRBAR --> SChneller Einstellung des SS --> geringere tau_on --> Geringere ΔO2Sp 

#Die vorliegenden Ergebnisse und deren Diskussion verdeutlichen einen bemerkenswerten Zusammenhang: Wenn die Sauerstoffspeicher des Körpers unmittelbar vor Bewegungsbeginn reduziert sind, führt dies zu einem geringeren Sauerstoffdefizit und einer rascheren Anpassung der Sauerstoffaufnahme (VO2) an den Gleichgewichtszustand.

#Diese Erkenntnisse bestätigen die früheren Untersuchungen von di Prampero und Kollegen (7). Sie stellten fest, dass sich die VO2-Kinetik deutlich beschleunigte (Halbwertszeit etwa 18 Sekunden), wenn vor einer intensiveren Übung (VO2 = 36 ml/kg/min) zunächst eine moderate Belastung (VO2 = 18 ml/kg/min) durchgeführt wurde. Im Vergleich dazu lag die Halbwertszeit bei direktem Beginn aus der Ruhe bei etwa 30 Sekunden.

#Die Wissenschaftler führten diese Ergebnisse auf eine bedeutende Verringerung der körpereigenen Sauerstoffreserven zurück. Diese Reduktion entstand hauptsächlich durch die verminderte venöse Sauerstoffkonzentration (CvO2) während der vorbereitenden Übungsphase. Der nachfolgende Übergang zur höheren Belastungsstufe konnte folglich nur noch zu einer moderaten weiteren Abnahme der CvO2 führen.

#Entsprechend dieser Logik wurde angenommen, dass ΔVO2st (gemäß Gleichung 2) beim Übergang von leichter zu intensiverer Belastung verhältnismäßig kleiner ausfiel. Dies erklärt sowohl das geringere Sauerstoffdefizit als auch die schnellere VO2-Kinetik.

#Diese Überlegungen werden zusätzlich durch die Forschungsergebnisse von Linnarson (13) gestützt. Seine Untersuchungen an Fahrradergometern zeigten, dass die Übergangsphasen der Sauerstoffaufnahme auf Ebene der Lungenkapillaren – nach Berücksichtigung der Veränderungen in den pulmonalen Sauerstoffspeichern – um 3 bis 7 Sekunden schneller abliefen.

## Aus Cautero2002 zu tau alveolär
#Die alveolare Zeitkonstante von 34,3 Sekunden wurde mittels des GR-Algorithmus (nach Grønlund) ermittelt, der den Atemzyklus als Zeit zwischen identischen Gaskonzentrationen in aufeinanderfolgenden Atemzügen definiert. Diese Zeitkonstante beschreibt, wie schnell sich der Gasaustausch zwischen Lungenbläschen und Blut bei einer 120-Watt-Fahrradergometer-Belastung anpasst.

#Der Wert ergibt sich aus der Messung der Nettogasmenge, die während eines Atemzugs zwischen Lunge und Blut ausgetauscht wird, wobei sowohl das über den Mund aufgenommene Gasvolumen als auch die Veränderungen der Lungengasspeicher berücksichtigt werden. Im Vergleich dazu lieferte der traditionelle AU-Algorithmus (nach Auchincloss) je nach angenommenem Lungenvolumen deutlich höhere Werte zwischen 36,6 und 46,8 Sekunden. Der GR-Algorithmus gilt dabei als präziser, da er keine Annahmen über das vorherige Lungenvolumen benötigt.

#Diese Zeitkonstante ist ein wichtiger Indikator für die Anpassungsfähigkeit des Gastransportsystems und die Effizienz der Stoffwechselprozesse in der arbeitenden Muskulatur.


### Francescato2003
#It should be also pointed out that the true O2 deficit can not be repaid during the exercise (for a review see [24]), a fact that is also supported by the essential identity of the gross O2 deficit incurred at work onset and of the gross O2 debt paid at work offset (see Results).
```

Beim Übergang von Ruhe zu Arbeit wird ein Teil des muskulären Sauerstoffbedarfs durch die Mobilisierung körpereigener O~2~-Speicher gedeckt. Für die Gesamtkapazität der O~2~-Speicher finden sich in der Literatur Werte zwischen 400 ml [@Beneke2002] über 500 ml [@Astrand2003, 241] bis 550 ml [@DiPrampero1970; @Margaria1976, 33]. Diese Speicher umfassen primär die pulmonalen Sauerstoffreserven in den Lungen (ΔO~2~S~p~) und im venösen Blut (ΔO~2~S~v~). Die an Muskelmyoglobin gebundenen Sauerstoffmengen (ΔO~2~S~m~) sind nach @Francescato2003 vergleichsweise gering und wurden in der vorliegenden Arbeit nicht berücksichtigt. Somit setzten sich die gesamten körpereignenen O~2~-Speicher durch die Summierung der zwei Haupt-Komponenten wie folgt zusammen: 
$$ 
\Delta O_{2}\text{-Speicher}\,[l] = \Delta O_2S_{p}\,[l] + \Delta O_2S_{v}\,[l] 
$$ 
Die verschiedenen Bestandteile tragen je nach Art, Intensität und Bedingungen der Übung 
unterschiedlich zu den Anforderungen der arbeitenden Muskeln bei (siehe @fig-UNTER und @fig-UEBER) 
[@DiPrampero1981]. Diese Beiträge sind jedoch nicht direkt in den gemessenen Atemgasen erkennbar, 
wodurch die tatsächlich verstoffwechselte O~2~-Menge auf Muskelebene unterschätzt wird.<br>
Folglich sollte das aus den Atemgasen berechnete EPOC~fast~ größer sein als das EPOC auf 
Muskelebene, und zwar um einen Betrag, der der Veränderung der körpereigenen O~2~-Speicher (ΔO~2~-Speicher) 
während des Übergangs von Ruhe zu stabilem Zustand (oder umgekehrt) entspricht. Dieses 
korrigierte EPOC wird als EPOC~PCr~ bezeichnet und wird, wie in @eq-EPOCPCR beschrieben, 
berechnet [@DiPrampero1983].
 

```{r}
#Auf der Grundlage der Berechnungen des Sauerstoffdefizites sowie wurde das insgesamt gemessene
#Brutto-Sauerstoffdefizit korrigiert, um das Netto-Sauerstoffdefizit zu
#erhalten, welches das Sauerstoffäquivalent der Spaltung von
#Phosphokreatin (PC) bei Arbeitsbeginn darstellt. Die bestimmte Menge an
#EPOC (Excess Post-exercise Oxygen Consumption) repräsentiert daher
#dieses korrigierte Sauerstoffdefizit, das durch die initiale PC-Spaltung
#entstanden ist.
```

:::::: columns
::: {.column width="52%"}

![Schematische Darstellung der Energiebereitstellung bei submaximaler Belastungsintensität ($<\dot{V}O_{2, max}$). Die Fläche eLa zeigt den laktaziden Energieumsatz, Kurve 3 den gemessenen Sauerstoffvolumenstrom ($\dot{V}O_2$). O~2~Store beschreibt die Ausschöpfung der Sauerstoffspeicher und deren Wiederauffüllung (Kurve 2'). $\dot{V}O_{2}^{al}$ kennzeichnet den PCr-Umsatz in O~2~-Äquivalenten mit der zugehörigen Resynthese (Kurve 1'). Halbwertszeiten (t~1/2~): 1 und 1' = 15 s; 2 und 2' = 25 s; 3 = 40 s (modifiziert nach diPrampero, 1981)](images/VO2_Unterschwellig.png){#fig-UNTER height="318"}
:::

::: {.column width="4%"}
:::

::: {.column width="44%"}

![Schematische Datstellung der energetischen Prozesse bei supramaximaler Belastung ($>\dot{V}O_{2, max}$). Die gestrichelte Linie markiert den Einsatzpunkt der Glykolyse bei Erreichen der $\dot{V}O_{2, max}$. Die Fläche La kennzeichnet den anaerob-laktaziden Energieumsatz. Alle weiteren Beschriftungen entsprechen denen in Abbildung 5. Halbwertszeiten (t~1/2~): 1 und 1' = 15 s; 2* = 30 s; 2' = 30 s (modifiziert nach diPrampero, 1981)](images/VO2_Ueberschwellig.png){#fig-UEBER height="318"}

:::
::::::

Die absolute Menge der verschiedenen Bestandteile der O~2~-Speicher
wurden mittels der von @Francescato2003 beschriebenen Methode wie folgt
bestimmt.

## Pulmonaler O~2~-Speicher (O~2~S~p~)

Die Änderung des pulmonalen Sauerstoffspeicher (ΔO~2~S~p~) zu Beginn der Belastung kann nach @Francescato2003 aus der Differenz zwischen der Zeitkonstante des am Mund gemessenen Sauerstoffvolumenstroms zum Start
der Belastung (τ~Start~) und der Zeitkonstante des auf alveolärer Ebene
gemessenen Sauerstoffvolumenstroms (τ~alveolär~) sowie dem netto
Steady-State-Sauerstoffvolumenstrom während der Belastung
$\dot{V}O_{2,net,SS}$ geschätzt werden [@Francescato2003].<br> 
Dafür wurde mit @eq-VO2_Start und wie im vorherigen Kapitel beschrieben der Sauerstoffvolumenstrom in Abhängigkeit von der Zeit während
der Belastung modelliert und $\dot{V}O_{2,net,SS}$ für jedes Belastungsintervall bestimmt.

$$
\dot{V}O_{2,\text{Belastung}}\,(t) = \dot{V}O_{2,\text{Amplitude}} \cdot \left(1 - e^{-\frac{t - TD}{\tau_{\text{Start}}}}\right) + \dot{V}O_{2,\text{Start}}
$$ {#eq-VO2_Start}

In der Studie von @Francescato2003 führten die Probanden auf einem
speziellen Widerstandsergometer für die Wadenmuskulatur (M.
gastrocnemius) wiederholte Fußstreckungen bei gestrecktem Knie und
verschiedenen Intensitäten durch, wobei für jede Belastung die
körpereigenen Sauerstoffspeicher berechnet wurden.<br> Da der pulmonale
Sauerstoffspeicher in der beschriebenen Studie basierend auf dem Anteil
der aktiven Muskelmasse bestimmt wurde, wird in der vorliegenden
Berechnung der Sauerstoffvolumenstrom ebenfalls mit dem Anteil der
aktiven Muskelmasse verrechnet, deren Berechnung im folgenden Abschnitt beschrieben
wird.

$$
\dot{V}O_{2,net, aktiv, SS}\,[l \cdot min^{-1}] = \dot{V}O_{2,net, SS}\,[l \cdot min^{-1}] \cdot \frac{Muskelmasse_{aktiv}\,[kg]}{Körpermasse\,[kg]}
$$ {#eq-dO2SP}

Die alveoläre Zeitkonstante τ~alveolär~ wurde von @Cautero2002 beim
Radfahren mit 34.3s festegelegt und wurde für die folgenden Berechnungen
als feste Konstante verwendet.<br> Anschließend konnte ΔO~2~S~p~ mit
folgender Gleichung bestimmt werden:

$$
\Delta O_{2}S_{p}\,[l] = \dot{V}O_{2,net, aktiv, SS}\,[l \cdot min^{-1}] \cdot (\tau_{Start}\,[min] - \tau_{alveolär}\,[min])
$$
In der vorliegenden Untersuchung musste eine Anpassung der beschriebenen Berechnungen nach @Francescato2003 vorgenommen werden, da die Belastungen nicht aus dem Ruhezustand, sondern nach einer Vorbelastung von 50 Watt starteten. Diese Vorbelastung führte zu einem erhöhten Sauerstoffvolumenstrom, wodurch $\dot{V}O_{2,Start}$ nicht dem Ruhe-Sauerstoffvolumenstrom $\dot{V}O_{2,Ruhe}$ entsprach. Folglich musste statt des auf die aktive Muskelmasse normierten $\dot{V}O_{2,net,SS}$ die auf die aktive Muskelmasse normierte Amplitude des Sauerstoffvolumenstroms $\dot{V}O_{2,Amplitude}$ verwendet werden. Dies resultierte in einem geringeren ΔO~2~S~p~, was auf die aufgrund der Vorbelastung schnellere Einstellung des Steady States und die geringere Amplitude zwischen dem Steady State und $\dot{V}O_{2,Start}$ zurückzuführen war [@DiPrampero1983].

> **Berechnungsbeispiel von ΔO~2~S~p~ für Test 01_02:**<br>
> $\Delta O_{2}S_{p}\,[l] = 3.709\,[l \cdot min^{-1}]  \cdot \left(\frac{20.75\,[kg]}{76.00\,[kg]}\right) \cdot \left(\frac{47.75}{60}\,[min] - \frac{34.3}{60}\,[min] \right)= 0.228\,[l]$

```{r}
### Whip Wassermann 1972
#Im Gegensatz zu den Sauerstoffaufnahme-Kinetiken bei leichten und moderaten Arbeitsintensitäten erhöht sich die Zeit bis zum Erreichen des Gleichgewichts erheblich bei Arbeitsraten über der anaeroben Schwelle. Tatsächlich wurde bei den höchsten Arbeitsraten in diesen Studien ein Gleichgewichtszustand des Sauerstoffverbrauchs in der 6. Minute nicht erreicht.
#Es ist möglicherweise nicht gerechtfertigt anzunehmen, dass die Sauerstoffaufnahme, die als scheinbare einfache exponentielle Funktion (hin zu einem projizierten Gleichgewichtswert) in Zeiträumen von nur 30 Sekunden anstieg, diesem Muster weiter folgen würde, wenn die Arbeit länger fortgesetzt würde. Unsere Ergebnisse zeigen, dass die Transport- und Aufnahmecharakteristika des gesamten Sauerstoffverbrauchsprozesses in der Lage sind, auf moderate, konstante Belastungen zu reagieren, indem sie eine Änderungsrate der Sauerstoffaufnahme induzieren, die proportional zum "Fehlersignal" der Sauerstoffaufnahme ist (d. h. der Unterschied zwischen der erforderlichen und der aktuellen Sauerstoffaufnahme zu diesem Zeitpunkt). Diese Erkenntnis stimmt mit der Arbeit von DiPrampero et al. und Margaria et al. überein. Bei höheren Arbeitsraten ist jedoch die Zeit bis zum Erreichen des Gleichgewichts stark verzögert und die Rate des Sauerstofftransports steigt langsamer an, was durch einen zweiten exponentiellen Prozess beschrieben werden kann. Diese Ergebnisse bei höheren Arbeitsraten zeigen, dass das Sauerstoffdefizit als Bruchteil des insgesamt für konstante Arbeit erforderlichen Sauerstoffs progressiv zunimmt, wenn die Arbeitslast über die anaerobe Schwelle hinaus erhöht wird. Ein solcher Befund wurde bereits zuvor berichtet.
#Da der Anteil des Sauerstoffdefizits, der aus gespeicherten Sauerstoff- und energiereichen Phosphatquellen (hauptsächlich Kreatinphosphat) stammt, in der frühen Phase der Arbeit genutzt wird, ist es vorhersehbar, dass der Anteil des Sauerstoffdefizits, der aus der Produktion von Milchsäure resultiert, bei höheren Arbeitsraten ebenfalls in einem zunehmend größeren Ausmaß ansteigt. 
#Der Index k(ΔVO˙2)k(ΔVO˙2​) (Minute 3-6) hat sich als nützlicher Indikator für die relative Nähe zu einem Gleichgewichtszustand der Sauerstoffaufnahme erwiesen. Die Bedeutung des ΔVO˙2ΔVO˙2​ ist, dass ein Teil des Energiebedarfs durch Glykolyse und Milchsäurebildung gedeckt wird, da die anderen verfügbaren Energie- und Sauerstoffspeicher in den aktiven Geweben wahrscheinlich innerhalb von 2-3 Minuten aufgebraucht sind. Wir glauben, dass der ΔVO˙2(56)ΔVO˙2​(56)-Index eine nützliche Darstellung der langsamen Komponente des Anstiegs der Sauerstoffaufnahme ist, die vermutlich den anaeroben Energiemechanismus widerspiegelt.
```

### Bestimmung der aktiven Muskelmasse: {#sec-MM .unnumbered .unlisted}

Zunächst wurde die gesamte Muskelmasse der Probanden abhängig vom
Geschlecht eingeschätzt. Dies erfolgte anhand der von @Janssen2000
mittels Magnetresonanzbildgebung bestimmten Verteilung der
Skelettmuskelmasse von 468 Männern und Frauen im Alter von 18 bis 88
Jahren. Da es sich in der vorliegenden Untersuchung um sehr aktive
Sportler mit vergleichsweise geringem Körperfettanteil handelte, wurde
jeweils von einer aktiven Muskelmasse ausgegangen, die der oberen Grenze
der Stichprobe im Alter von 18-29 Jahren entsprach. Für Frauen entsprach
die Relative Skelettmuskelmasse laut @fig-MM etwa 34% der
Gesamtkörpermasse und für Männer etwa 42%.

![Tabellarische Darstellung der Probandenmerkmale aus Janssen et al.
(2000). Werte sind Gruppendurchschnittswerte ± SD. n: Anzahl der
Probanden; Weight: Gewicht; Height: Größe; BMI: Body-Mass-Index; Total
SM: Gesamt-Skelettmuskelmasse; Relative SM: Relative Skelettmuskelmasse
in Prozent; Lower Body SM: Skelettmuskelmasse des Unterkörpers; Upper
Body SM: Skelettmuskelmasse des
Oberkörpers.](images/Muskelmassenanteil.png){#fig-MM .caption}

In anderen Untersuchungen wurde der Anteil der aktiven Muskelmasse an
der Gesamtmuskelmasse (Muskelmasse~aktiv~) beim Radfahren im Sitzen in
der Regel auf 60%-75% [@Heck2022] bis zu 80% bei hochintensiven
Belastungen geschätzt [@Beneke2002]. Da nach @Janssen2000 der Anteil der Muskulatur des Unterkörpers im Bezug zur gesamten Muskelmasse für die bereits beschriebene Stichprobe bei Frauen ca. 57,3% und bei Männern ca. 54,8% beträgt, wurde für das Radfahren im Sitzen ein Wert von 65% als Anteil der aktiven Muskelmasse an der Gesamtmuskelmasse gewählt. Dieser Wert liegt im unteren Bereich der in der Literatur berichteten Spanne von 60-80% für das Radfahren im Sitzen. <br> Beim Radfahren im Stehen ändert sich die
Unterstützung des Körpergewichts deutlich, da die Unterstützung des
Sattels entfällt und das Gewicht nun verstärkt von den Händen am Lenker
getragen wird. Dies führt zu einer stärkeren Aktivierung der Muskulatur,
insbesondere der Oberkörper- und Armmuskeln [@Duc2008; @Caldwell1998;
@Li1998; @Ryschon1991a; @Bosak2001; @Tanaka1987; @Arkesteijn2016].
Aufgrund dessen wird angenommen, dass ein größerer Anteil von ca. 75%
der aktiven Muskelmasse an der Gesamtmuskelmasse für das Radfahren im
Stehen beteiligt ist. Muskelmasse~aktiv~ wird wie folgt berechnet:

$$
Muskelmasse_{aktiv}\,[kg] = 
\begin{cases} 
Körpermasse\,[kg] \cdot 0.34 \cdot 0.65 \quad\rightarrow & \text{♀ | Sitzen} \\
Körpermasse\,[kg] \cdot 0.34 \cdot 0.75 \quad\rightarrow & \text{♀ | Stehen} \\
Körpermasse\,[kg] \cdot 0.42 \cdot 0.65 \quad\rightarrow & \text{♂ | Sitzen} \\
Körpermasse\,[kg] \cdot 0.42 \cdot 0.75 \quad\rightarrow & \text{♂ | Stehen} \\
\end{cases}
$$ {#eq-MMAKTIV}

## Venöser O~2~-Speicher (ΔO~2~S~v~)

:::::: columns
::: {.column width="45%"}
![Schematische Darstellung der Komponenten des Sauerstofftransports und
der Sauerstoffdiffusion von der Kapillare zu den
Muskelzellen-Mitochondrien. C~a~O~2~: arterielle O~2~-Konzentration;
C~v~O~2~: venöser O~2~-Gehalt; DO~2~: Diffusivität von O~2~; Mb:
Myoglobin; P~mito~O~2~: mitochondrialer O~2~-Partialdruck; P~mv~O~2~:
mikrovaskuläre O~2~-Partialdruck; $\dot{Q}$: Herzminutenvolumen;
$\dot{V}O_2$: Sauerstoffvolumenstrom (Barstow,
2019)](images/Fick.png){#fig-FICK .caption}
:::

::: {.column width="2%"}
:::

::: {.column width="53%"}
Die Berechnung der Sauerstoffspeicher im venösen Blut basiert auf dem
Produkt des venösen Blutvolumens (VBV) und der Veränderung der
arteriovenösen Sauerstoffdifferenz im Steady-State Δ(C~a~ -
C~v~)<sup>SS</sup> und derjenigen in Ruhe Δ(C~a~ - C~v~)<sup>Ruhe</sup>
[@Francescato2003]:

$$
\Delta O_2S_{v} = \left[ \Delta (C_a - C_v)^{Belastung} - \Delta (C_a - C_v)^{Ruhe} \right] \cdot VBV
$$ {#eq-O2S1}

Mit Hilfe der Fick'sche Gleichung @eq-FICK1 kann @eq-O2S1 zu @eq-O2S2
umgestellt werden. Die Fick'sche Gleichung besagt, dass der
Sauerstoffvolumenstrom $\dot{V}O_2\, (t)$ das Produkt aus dem
Herzminutenvolumen (Q) und der arteriovenösen Sauerstoffdifferenz
(C~a~ - C~v~) ist (siehe @fig-FICK) . Dabei steht C~a~ für die
Sauerstoffkonzentration im arteriellen Blut und C~v~ für die
Sauerstoffkonzentration im venösen Blut [@Fick1855; @Barstow2019].

$$
\dot{V}O_2 \, (t) = \dot{Q} \cdot (C_a - C_v) \Rightarrow (C_a - C_v) = \frac{\dot{V}O_2}{\dot{Q}} 
$$ {#eq-FICK1}

Für den Belastungs und Ruhezustand lässt sich @eq-FICK1 wie folgt
umformen, wobei $\dot{Q}_{Ruhe}$ und $\dot{Q}_{Belastung}$ das
Herzminutenvolumen in Ruhe und unter Belastung beschreibt:

$$ 
(C_a - C_v) = \frac{\dot{V}O_2\, (t)}{\dot{Q}}\Rightarrow
\begin{cases} 
\Delta (C_a - C_v)^{Belastung} = \frac{\dot{V}O_{2, Belastung}}{\dot{Q}_{Belastung}} \\ 
\Delta (C_a - C_v)^{Ruhe} = \frac{\dot{V}O_{2, Ruhe}}{\dot{Q}_{Ruhe}}
\end{cases} 
$$ {#eq-FICK2}
:::
::::::

Setzt man die beiden Ausdrücke aus @eq-FICK2 in @eq-O2S1 ein, erhält man
folgende Endgleichung:

$$
\Delta O_2S_{v}\,[l] = \left[ \frac{\dot{V}O_{2gross, SS}\,[l \cdot min^{-1}]}{\dot{Q}_{Belastung}\,[l \cdot min^{-1}]} - \frac{\dot{V}O_{2, Ruhe}\,[l \cdot min^{-1}]}{\dot{Q}_{Ruhe}\,[l \cdot min^{-1}]} \right] \cdot VBV\,[l]
$$ {#eq-O2S2}

> **Berechnungsbeispiel von ΔO~2~S~p~ für Test 01_02:**<br>
> $\Delta O_2S_{v}\,[l] = \left[ \frac{4.118\,[l \cdot min^{-1}]}{27.819\,[l \cdot min^{-1}]} - \frac{0.409\,[l \cdot min^{-1}]}{5.529\,[l \cdot min^{-1}]} \right] \cdot 3.405\,[l] = 0.252 [l]$

VBV sowie $\dot{Q}_{Ruhe}$ und $\dot{Q}_{Belastung}$ wurden wie folgt
berechnet:

```{r}
#Normieren auf aktive Muskelmasse macht für folgende Berechnung keinen Unterschied

# Diese Gleichung stellt die Berechnung der Veränderung der
#Sauerstoffspeicher im venösen Blut dar, wobei die Differenzen der
#arteriovenösen Sauerstoffkonzentrationen unter Belastung und in Ruhe in
#Verbindung mit dem venösen Blutvolumen betrachtet werden.Diese Gleichung stellt die Berechnung der Veränderung der
#Sauerstoffspeicher im venösen Blut dar, wobei die Differenzen der
#arteriovenösen Sauerstoffkonzentrationen unter Belastung und in Ruhe in
#Verbindung mit dem venösen Blutvolumen betrachtet werden.
```

### Berechnung des VBV, $\dot{Q}_{Ruhe}$ und $\dot{Q}_{Belastung}$ {#sec-VBV_Q .unnumbered .unlisted}

:::::: columns
::: {.column width="74%"}
Das venöse Blutvolumen wurde für die Berechnung als 64% des gesamten
Blutvolumens angenommen [@Astrand2003, 147], welches wiederum als 7% der
Körpermasse (in Kilogramm) angesetzt wurde [@Tandon2011, 113]. Dies
ergibt die folgende Formel:

$$ 
VBV\,[l] =  0.64 \cdot 0.07\cdot Körpermasse\,[kg]
$$ {#eq-VBV}

Das individuelle Herzminutenvolumen jedes Probanden in Ruhe
$\dot{Q}_{Ruhe}$ und unter Belastung $\dot{Q}_{Belastung}$ wurde
basierend auf den Daten der Studie von @Astrand1964, die bei
verschiedenen Intensitäten auf dem Fahrradergometer das
Herzminutenvolumen gemessen haben, berechnet. Die in @fig-HZV zu
sehenden Regressionsgleichungen wurden durch lineare Regression der
Herzminutenvolumina in Abhängigkeit vom Sauerstoffvolumenstrom
bestimmt.<br /> Um $\dot{Q}_{Belastung}$ zu berechnen, wurde der
modellierte Steady-State-Sauerstoffvolumenstrom der jeweiligen
Belastungsintensität $\dot{V}O_{2gross, SS}$ bzw. der jeweilige
$\dot{V}O_{2, Ruhe}$ jedes Probanden für die Berechnung verwendet.
Abhängig von der prozentualen Auslastung $VO_{2, Prozent}$ des
$\dot{V}O_{2gross, SS}$ im Vergleich zum im 1. Stufentest erreichten
maximalen Sauerstoffvolumenstroms des Probanden und des Geschlechts
wurde die passende Regressionsgleichung, @eq-QBELASTUNG für
$\dot{Q}_{Belastung}$ oder @eq-QRUHE für $\dot{Q}_{Ruhe}$ ausgewählt
[@Francescato2003].
:::

::: {.column width="2%"}
:::

::: {.column width="24%"}
![Beziehung zwischen Herzminutenvolumen und Sauerstoffvolumenstrom auf
dem Radergometer (Åstrand,
1964)](images/Herzminutenvolumen.png){#fig-HZV .caption}
:::
::::::

$$
\dot{Q}_{Belastung}\,[l \cdot min^{-1}] = 
\begin{cases} 
9.88 + 3.23 \cdot \dot{V}O_{2gross, SS}\,[l \cdot min^{-1}]\quad\rightarrow & \text{♀ | }VO_{2, Prozent} \leq 70 \%\\    
3.66 + 6.81 \cdot \dot{V}O_{2gross, SS}\,[l \cdot min^{-1}]\quad\rightarrow & \text{♀ | }VO_{2, Prozent} \geq 70 \%\\
6.55 + 4.35 \cdot \dot{V}O_{2gross, SS}\,[l \cdot min^{-1}]\quad\rightarrow & \text{♂ | }VO_{2, Prozent} \leq 70 \% \\
3.07 + 6.01 \cdot \dot{V}O_{2gross, SS}\,[l \cdot min^{-1}]\quad\rightarrow & \text{♂ | }VO_{2, Prozent} \geq 70 \%
\end{cases}
$$ {#eq-QBELASTUNG}

$$
\dot{Q}_{Ruhe}\,[l \cdot min^{-1}] = 
\begin{cases} 
3.66 + 6.81 \cdot \dot{V}O_{2, Ruhe}\,[l \cdot min^{-1}]\quad\rightarrow & \text{♀} \\    
3.07 + 6.01 \cdot \dot{V}O_{2, Ruhe}\,[l \cdot min^{-1}]\quad\rightarrow & \text{♂}
\end{cases}
$$ {#eq-QRUHE}

## O~2~-Speicher im Myoglobin (ΔO~2~S~m~) {.unnumbered .unlisted}

Ein weiterer Bestandteil der körpereigenen Sauerstoffspeicher umfasst den an Muskelmyoglobin gebundenen O~2~. Die Angaben in der Literatur unterscheiden sich dabei deutlich: Während @Astrand2003 von bis zu 500 ml ausgehen, zeigen die Berechnungen von @Francescato2003, dass ΔO~2~S~m~ höchstens 1% der gesamten körpereigenen O~2~-Speicher ausmacht. Da die Berechnungen der anderen O~2~-Speicher-Komponenten in dieser Arbeit auf den Berechnungen von @Francescato2003 basieren und der Anteil der ΔO~2~S~m~ vernachlässigbar gering ist, wird auf eine separate Berechnung verzichtet.

```{r}

# Unterschied zwischen Hämoglobin und myoglobin kurz anschneiden. Außerdem Otto et al. 2013 für O2 am Haemoglobin.

# ***Normieren auf aktive Muskelmasse***

# ::: columns
# ::: {.column width="74%"}
# [@Francescato2003; @Mole1999; @Masuda1999]

# Ein weiterer Bestandteil der körpereigenen Sauerstoffspeichers umfasst
# den Sauerstoff, der an Muskelmyoglobin gebunden ist. Auf Basis der Daten
# von @Mole1999 kann die Myoglobin-Desaturierung während des Trainings
# anhand der erbrachten mechanischen Leistung P~mech~ geschätzt werden.
# @Mole1999 bestimmten die in @fig-DeoxyMB abgebildete Beziehung zwischen
# dem Prozentsatz an desoxymyoglobin (%deoxyMb) und der mechanischen
# Leistung wie folgt:

# $$
# \% \text{deoxyMb} = 2.09 \cdot P_{mech}\,[Watt] + 14.2
# $$ {#eq-DEOXYMB}

# $$
# P_{mech/kg,aktiv}\,[\text{Watt} \cdot \text{kg}^{-1}] = \frac{P_{mech}\,[\text{Watt}]}{Muskelmasse_{aktiv}\,[\text{kg}]}
# $$ {#eq-PMECHKG}

# Unter der Annahme einer Myoglobinkonzentration von 4,46 g/kg Nassmuskel,
# wie von Masuda et al. \[25\] berichtet, und einer
# Sauerstoffbindungskapazität von 1,34 mlO2/g Myoglobin, kann die
# zusätzliche Menge an Sauerstoff, die durch Myoglobin-Desaturierung
# freigesetzt wird, wie folgt berechnet werden:

# $$ 
# \Delta O_2S_{M}\,[ml] = \left(\frac{2.09 \cdot P_{mech}\,[Watt]}{100}\right) \cdot 4.46\,[g \cdot kg^{-1}] \cdot 1.34\,[ml \cdot O_{2} \cdot kg^{-1}] \cdot Muskelmasse_{aktiv}\,[kg] 
# $$ {#eq-D02DEF}

# Hierbei repräsentiert P~mech~ die mechanische Leistung. Die individuelle
# Muskelmasse der Plantarflexoren (PF) wird in Kilogramm angegeben. Diese
# Formel ermöglicht es, den Teil des Sauerstoffspeichers zu berechnen, der
# spezifisch durch die Desaturierung von Myoglobin während des Übergangs
# von Ruhe zu Arbeit freigesetzt wird.
# :::

# ::: {.column width="2%"}
# :::

# ::: {.column width="24%"}
# ![Beziehung zwischen dem Prozentsatz an Desoxymyoglobin (%deoxyMb) und
# der mechanischen Leistung (Molé,
# 1999)](images/DeoxyMB.png){#fig-DeoxyMB .caption}
# :::
# :::

# > ***Beispielberechnung - Test 01_02:***<br>
# > $\Delta O_{2}S_{p}\,[l] = 3.709\,[l \cdot min^{-1}] \cdot \left(\frac{47.75}{60}\,[min] - \frac{34.3}{60}\,[min] \right) \cdot 0.273 = 0.228\,[l]$

# $$ 
# O_2\text{def} = EPOC - \Delta O_2S_p - \Delta O_2S_v - \Delta O_2S_m
# $$ {#eq-02DEF}

# Diese Gleichung stellt die Berechnung der Veränderung der
# Sauerstoffspeicher im venösen Blut dar, wobei die Differenzen der
# arteriovenösen Sauerstoffkonzentrationen unter Belastung und in Ruhe in
# Verbindung mit dem venösen Blutvolumen betrachtet werden.

# Auf dieser Grundlage wurde das insgesamt gemessene
# Brutto-Sauerstoffdefizit korrigiert, um das Netto-Sauerstoffdefizit zu
# erhalten, welches das Sauerstoffäquivalent der Spaltung von
# Phosphokreatin (PC) bei Arbeitsbeginn darstellt. Die bestimmte Menge an
# EPOC (Excess Post-exercise Oxygen Consumption) repräsentiert daher
# dieses korrigierte Sauerstoffdefizit, das durch die initiale PC-Spaltung
# entstanden ist.

# Entspricht die ermittelte Menge den in der Literatur angegebenen
# Sauerstoffspeichern? z.B. Maragria1982 - 0,55 L usw....?

# The oxygen drawn from the stores at maximum oxygen consumption can be 
# estimated by assuming that (a) the saturation of haemoglobin with oxygen 
# of the venous blood is about 55 per cent less than at rest (venous HbO2 = 20 
# per cent of Hb instead of 75 per cent); (b) the volume of venous blood is 80 
# per cent of the total blood volume; and (c) the myoglobin, the concentration 
# of which in the muscles is about 2g per kg, is completely desaturated of oxygen 
# in maximal or supramaximal exercise, but in rest it is completely saturated. 
# The depletion of oxygen stores in maximal exercise can therefore be calculated 
# as amounting to about 0-5501.
```

# Validierung der W~PCR~ Werte

```{r}
#In der Literatur finden sich verschiedene Angaben zum zeitlichen Verlauf der PCr-Resynthese: Von t**<sub>1/2</sub> = 21-22 s [@Harris1976], und t<sub>1/2</sub> = 24,3 s bei niedriger sowie t<sub>1/2</sub> = 34,7 s bei moderater Belastung [@McCann1995] (@fig-MCCANN) bis hin zu t<sub>1/2</sub> = 30-40 s [@DiPrampero1969]. Unter Annahme einer 4-5-fachen Halbwertszeit, welche einer Wiederherstellung der PCr-Speicher von ca. 93,8-96,9 % entspricht, resultieren aus den genannten Halbwertszeiten theoretische Erholungsdauern von etwa 84-200 s. Diese berechneten Werte liegen weitgehend in dem Bereich der in der Literatur zu findenden Erholungszeiten von 60-120 s [@Hargreaves2006; @Hargreaves2020] bis 180-300 s [@Morton2008].

#Verwendet man** $\dot{V}O_{2,EPOC,fast}$ als nötigen Sauerstoffumsatz für die Resynthese des PCr, sollte der Zeitverlauf bzw. die Zeitkonstante des $\dot{V}O_{2,EPOC,fast}$-Abfalls theoretisch dem Zeitverlauf der PCr-Resynthese entsprechen. Die $\dot{V}O_{2,EPOC,fast}$-Kinetik verläuft jedoch etwas langsamer als die PCr-Resynthese, was auf den zusätzlichen Sauerstoffbedarf zur Wiederauffüllung der O2-Speicher zurückzuführen ist [@DiPrampero1981]. Basierend auf den beschriebenen PCr-Halbwertszeiten (t<sub>1/2</sub> = 21-40 s) und der Umrechnung in Zeitkonstanten ($\tau$ = t<sub>1/2</sub>/ln(2)) sollten die $\tau_{fast}$-Werte der $\dot{V}O_{2,EPOC,fast}$-Modellfunktionen ungefähr lim Bereich von $\tau$ = 30,3-57,7 s liegen.


#Von den verfügbaren Reserven anorganischer Phosphate in der Skelettmuskulatur können nur etwa 88% für die muskuläre Energiebereitstellung metabolisiert werden. Diese Limitierung resultiert aus dem Umstand, dass bereits eine Reduktion der intrazellulären ATP-Konzentration um 20-40% gegenüber dem Ruhewert zur muskulären Kontraktionsinsuffizienz führt. ATP-Reserven sind ca. 5 mmol pro kg Muskelfeuchtmasse [@Hargreaves2006, 8; @Heck2022, 40]
```

Um die physiologische Plausibilität der bestimmten W~PCr~ Mengen zu
überprüfen, vergleichbar mit dem Vorgehen von @Dunst2019 für jeden
Probanden Minimal-, Durchschnitts- und Maximal- Normwerte des
PCr-Umsatzes bestimmt. Diese Berechnungen basieren auf der bereits
berechneten aktiven Muskelmasse, Literatur-Normwerten der
Kreatinphosphatspeicher (PCr) sowie aus der Literatur abgeleiteten
physiologischen Fakten. In folgender Tabelle sind mehrere mittels
Muskelbiospie oder mittels 31P-Magnetresonanzspektroskopie (englisch:
Phosphorus Magnetic Resonance Spectroscopy = P-MRS) ermittelte PCr-Werte
sowie Normwerte aus der Fachliteratur dargestellt:


```{r}
#| label: tbl-PCr
#| tbl-cap-location: bottom
#| tbl-cap: "Angaben zu PCr-Konzentrationen in der Fachliteratur"

ft_PCr <- readRDS("rds/ft_PCr.rds")


# Anzeigen der Tabelle
ft_PCr
```

Wie in @tbl-PCr zu sehen varriireen die in der Literatur berichteten
PCr-Werte stark und reichen von 15.7 [@Bangsbo1993] bis 37.7
mmol/kg [@Walter1999]. Diese große Variabilität ist wahrscheinlich auf
die unterschiedlichen Methoden zurückzuführen, mit denen diese Werte
bestimmt wurden. Im Allgemeinen werden niedrigere Werte gefunden, wenn
PCr aus Muskelbiopsien bestimmt wird, da wahrscheinlich ein gewisser
artifizieller PC-Abbau zwischen Probenahme und Einfrieren stattfindet
[@Francescato2003]. Für die Plausibilität-Bestimmung der berechneten
W~PCr~ wurden somit anahnd der tatsächlihce gemessenen Werte der Tabelle
eine Durchschnittwerte (PCr~Norm~ = 20.34 \[mmol \cdot kg\^-1\]) sowie
in Minimal- (PCr~min~ = 15.7 \[mmol \cdot kg\^-1\]) und Maximalwert
bestimmt (PCr~max~ = 37.7 \[mmol \cdot kg\^-1\]). PCr~Norm~ entspricht
somit ungefähr dem häufig in der Literatur verwendetem Normwert von 20
mmol \cdot kg\^-1[@DeMarees2003, 346; @Heck2022, 40].

![PCr-Kinetik während (a, c) und nach (b, d) submaximaler Belastung der
Unterarmmuskulatur bei unterschiedlichen Intensitäten. Dargestellt sind
Mittelwerte ± SEM der PCr-Konzentration
(mmol·kg<sub>TG</sub><sup>-1</sup>) über die Zeit (s) bei niedriger (a &
b) und moderater Belastung (c & d). Die Zeitkonstanten (τ) betrugen
während der Belastung τ = 33s ≙ t<sub>1/2</sub> = 22.9s (a) bzw. τ = 53s
≙ t<sub>1/2</sub> = 36.7s (c) und in der Erholungsphase τ = 35s ≙
t<sub>1/2</sub> = 24.3s (b) bzw. τ = 50s ≙ t<sub>1/2</sub> = 34.7s (d).
(Modifiziert nach McCann et al., 1995, aus Heck et al.,
2022)](images/MCCann_PCr.png){#fig-MCCANN .caption}

:::::: columns
::: {.column width="65%"}
### P/O~2~-Verhältnis

Für die Berechnung der PCr-Speicher in der Muskulatur muss das
P/O~2~-Verhältnis (P/O~2~) bestimmt werden. Dieses Verhältnis gibt an,
wie viele Mol energiereiche Phosphatverbindungen, in diesem Fall PCr,
durch den Umsatz eines Mols Sauerstoff resynthetisiert werden können.<br>
PCr dient wie in @fig-STEGEMANN zu sehen zu Belastungsbeginn als leicht
verfügbare Quelle von Phosphorylgruppen für die schnelle Synthese von
ATP aus ADP. Sinkt der akute Energiebedarf nach Belastungsende, wird im
Katabolismus produziertes ATP verwendet, um die PCr-Reserven wieder
aufzufüllen, indem die Creatin-Kinase-Reaktion umgekehrt wird. Wobei pro
Mol CrP ein Mol ATP benötigt wird. Das Enzym Creatin-Kinase katalysiert
die folgende reversible Reaktion [@Nelson2012, 526]:

$$
\text{ADP} + \text{PCr} \stackrel{\text{Creatin-Kinase}}{\rightleftharpoons} \text{ATP} + \text{Cr}
$$ 
Indem man die benötigte Sauerstoffmenge in Mol für die Synthese von
einem Mol ATP bestimmt, was wiederum einem Mol PCr entspricht, kann dann
P/O~2~ bestimmt werden.
Abhängig vom verstoffwechselten Substrat und des angenommenen Wertes der
daraus reultierenden ATp-Ausbeute ergibt sich P/O~2~ des jewieligen
Substrates.

Die Angaben der Gesamtausbeute an ATP-Molekülen beim vollständigen
oxidativen Abbau eines Glukosemoleküls (C~6~H~12~O~6~) in der der
Atmungskette unterscheiden sich deutlich. In der Regel werden Werte
zwischen 30 und 38 ATP-Molekülen pro Glukosemolekül angegeben. Besonders
in älterer Fachliteratur finden sich eher die höheren Werte von bspw. 36
ATP-Molekülen pro Glukosemolekül [@McGilvery1975, 19; @Stegemann1991,
43; @Brooks2004, 35] während in modernerer Fachliteratur eher Werte von
30 bis 32 ATP-Molekülen pro Glukosemolekül angegeben werden
[@Nelson2012, 759; @Horn2021, 272]. Da wie in @eq-KH zu sehen ein Mol
C~6~H~12~O~6~ (≙180 g) mit 6 mol O~2~ (≙134,4 Liter) zu 6 mol H~2~O und
6 mol CO~2~ (≙134,4 Liter) reagiert, kann man das P/O~2~-Verhältnis für
Glukose (P/O~2,KH~) wie in @eq-PO_KH berechnen [@Stegemann1991,57].

$$
\text{C}_6\text{H}_{12}\text{O}_6 + 6\text{O}_2 \rightarrow 6\text{CO}_2 + 6\text{H}_2\text{O}
$$ {#eq-KH}

$$ 
\text{P/O}_{\text{2,KH}} = \begin{cases}
\frac{36 \text{ mol ATP}}{6 \text{ mol O}_2} = 6.0 \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]} \\
\frac{30 \text{ mol ATP}}{6 \text{ mol O}_2} = 5.0 \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]} 
\end{cases}
$$ {#eq-PO_KH}

Das P/O~2~-Verhältnis~KH~ von 6.0 entspricht dem Wert aus
@fig-MCGILVERY, in der folgenden Arbeit wird jedoch das P/O~2~KH\~ von
5.0 verwendet.

Werden nicht nur Glukose sondern auch Fettsäuren oxidativ
verstoffwechselt ändert sich P/O~2~. Fettsäuren werden nur unter aeroben
Bedingungen im Rahmen der β-Oxidation abgebaut, da das ATP – im
Unterschied zur Glykolyse – erst in der Atmungskette entstehen kann. Die
vollständige Oxidation eines Moleküls der am häufigsten
verstoffwechselten Fettsäure, der Palmitinsäure (C~16~H~32~O~2~; 1 Mol ≙
256 g), im menschlichen Körper verwendet 23 Moleküle O~2~ und genereiert
je nach Literaturangaben zwischen 106 Mol ATP [@Nelson2012, 675;
@Horn2021, 272] und 129 Mol ATP [@Stegemann1991,44; @Brooks2004, 35].

:::

::: {.column width="2%"}
:::

::: {.column width="33%"}
![Sauerstoffvolumenstrom und EPOC sowie die parallel dazu verlaufende
Konzentration des PCr und ATP im Trockenmuskel (Stegemann,
1990)](images/Stegemann_EPOC_PCr_2.png){#fig-STEGEMANN .caption}

![Konventionell berechnete Werte für die Ausbeute an energiereichem
Phosphat aus verschiedenen Brennstoffen. Die Werte für "fatty acids"
(Fettsäuren) sind berechnete Mittelwerte für ein Gemisch, das der
Zusammensetzung des menschlichen Fettgewebes entspricht. (McGilvery,
1975)](images/McGilvery.png){#fig-MCGILVERY .caption}
:::
::::::

Somit lässt sich das P/O~2~-Verhältnis für Fettsäuren (P/O~2,Fett~)
vereinfacht wie folgt berechnen:

$$
\text{C}_{16}\text{H}_{32}\text{O}_2 + 23\text{O}_2 \rightarrow 16\text{CO}_2 + 16\text{H}_2\text{O} 
$$ {#eq-FETT}

$$ 
\text{P/O}_\text{2,Fett} = \begin{cases}
\frac{129 \text{ mol ATP}}{23 \text{ mol O}_2} = 5.61 \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]}\\
\frac{106 \text{ mol ATP}}{23 \text{ mol O}_2} = 4.61 \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]} 
\end{cases}
$$ {#eq-PO_FETT}


:::::: columns
::: {.column width="66%"}
In der Realität werden neben der Palmitinsäure noch weitere Fettsäuren
verstoffwechselt, wodurch sich das P/O~2,Fett~ wieder ändern kann. In
der folgenden Arbeit wird das "moderne" P/O~2,Fett~ von 4.61 verwendet.

Kennt man den Anteil des verstoffwechselten Substrates kann anschließend
das P/O~2~-Verhältnis für die jeweilige Belastung ermittelt werden [@DiPrampero1973]. Die
Substratverteilung von Kohlenhydraten und Fetten lässt sich mit Hilfe
des RQ und unter nicht-Berücksichtigung des Eiweisstoffwechsels
näherungsweise mit @eq-SUBSTRATE einschätzen [@Astrand2003, 372]. Das
dementsprechende P/O~2~-Verhältnis der Belastuing
(P/O~2~-Verhältnis~Bel~) lässt sich dann mit @eq-PO_BEL berechnen. Die
prozentuale Substratverteilung sowie P/O~2~-Verhältnis~Bel~ für die
belastungsspezifischen RQ-Werte sind in @tbl-SUBSTRATE dargestellt.\
$$
\begin{gathered}
\text{KH}\% = \frac{RQ - 0.70}{0.30} \cdot 100 \\
\text{Fett}\% = \frac{1.00 - RQ}{0.30} \cdot 100
\end{gathered}
$$ {#eq-SUBSTRATE}

$$ 
\begin{gathered}
\text{P/O}_{2,\text{Bel}} = \frac{\text{P/O}_{2,\text{Fett}} \cdot (1.00 - RQ) + \text{P/O}_{2,\text{KH}} \cdot (RQ - 0.70)}{0.30}  \\
\hspace{2.2cm}\downarrow \\
\text{P/O}_{2,\text{Bel}} = \frac{4.61 \cdot (1.00 - RQ) + 5.0 \cdot (RQ - 0.70)}{0.30}
\end{gathered}
$$ {#eq-PO_BEL}
:::

::: {.column width="2%"}
:::

::: {.column width="32%"}
```{r echo=FALSE, output=FALSE}
library(DT)
# RQ und Substrate und P/O2
RQ_Substrate <- data.frame(
  RQ = c(0.700, 0.710, 0.720, 0.730, 0.740, 0.750, 0.760, 0.770, 0.780, 0.790, 
         0.800, 0.810, 0.820, 0.830, 0.840, 0.850, 0.860, 0.870, 0.880, 0.890, 
         0.900, 0.910, 0.920, 0.930, 0.940, 0.950, 0.960, 0.970, 0.980, 0.990, 1.000),
  Fett_Prozent = c(100.0, 96.7, 93.3, 90.0, 86.7, 83.3, 80.0, 76.7, 73.3, 70.0,
                   66.7, 63.3, 60.0, 56.7, 53.3, 50.0, 46.7, 43.3, 40.0, 36.7,
                   33.3, 30.0, 26.7, 23.3, 20.0, 16.7, 13.3, 10.0, 6.7, 3.3, 0.0),
  KH_Prozent = c(0.0, 3.3, 6.7, 10.0, 13.3, 16.7, 20.0, 23.3, 26.7, 30.0,
                 33.3, 36.7, 40.0, 43.3, 46.7, 50.0, 53.3, 56.7, 60.0, 63.3,
                 66.7, 70.0, 73.3, 76.7, 80.0, 83.3, 86.7, 90.0, 93.3, 96.7, 100.0),
  PO_Ratio = c(4.610, 4.623, 4.636, 4.649, 4.662, 4.675, 4.688, 4.701, 4.714, 4.727,
               4.740, 4.753, 4.766, 4.779, 4.792, 4.805, 4.818, 4.831, 4.844, 4.857,
               4.870, 4.883, 4.896, 4.909, 4.922, 4.935, 4.948, 4.961, 4.974, 4.987, 5.000)
)

DT_RQ_Substrate <- datatable(RQ_Substrate, options = list(
  dom = 'tp',
  pageLength = 8,
  autoWidth = TRUE,
  scrollX = FALSE,
  columnDefs = list(
    list(title = "RQ", targets = 0),
    list(title = "Fett %", targets = 1),
    list(title = "KH %", targets = 2),
    list(title = "P/O<sub>2</sub> - Verhältnis", targets = 3)
  )
), rownames = FALSE, escape = FALSE) %>%
  formatRound(columns = 1, digits = 2) %>%
  formatRound(columns = 2:3, digits = 1) %>%
  formatRound(columns = 4, digits = 3)
```

```{r}
#| label: tbl-SUBSTRATE
#| tbl-cap-location: bottom
#| tbl-cap: "Zusammenhang zwischen dem respiratorischem Koeffizienten RQ und dem prozentualen verstoffwechseltem Substrat sowie dem P/O<sub>2</sub> - Verhältnis [mol ATP &middot; mol O<sub>2</sub><sup>-1</sup>]"

DT_RQ_Substrate
```
:::
::::::

Mit Kentniss von P/O~2,Bel~, VO2~fast,corrected~. Muskelmasse~aktiv~
und dem Volumen von Sauerstoff unter Standardbedingungen (V~m,O2~ =
22,414 Litern) (siehe Kapitel "Energieumsatzberechnung")
[@Ciba-Geigy1977, 45] kann nun die PCr Menge in mmol normiert auf die
aktive Muskelfeuchtmasse (PCr~Bel~) für jede Belastung berechnet werden.

$$
\begin{gathered}
\text{PCr}_{\text{Bel}} \, = \frac{EPOC_{PCr} \cdot \text{P/O}_{2,\text{Bel}} \cdot 1000}{\text{Muskelmasse}_{\text{aktiv}} \cdot V_{m,O_2}} \\[10pt]
\text{PCr}_{\text{Bel}} \text{ [mmol} \cdot \text{kg}^{-1}\text{]} \, = \frac{EPOC_{PCr}\,[l] \cdot \text{P/O}_{2,\text{Bel}} \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]} \cdot 1000}{\text{Muskelmasse}_{\text{aktiv}} \text{ [kg]} \cdot 22.414 \text{ [L} \cdot \text{mol O}_2^{-1}\text{]}}
\end{gathered}
$$ {#eq-PCr}

> **Berechnungsbeispiel für PCr:**<br> Muskelmasse<sub>aktiv</sub> = 20
> \[kg\]; EPOC<sub>PCr</sub> = 1.5 \[l\]; P/O<sub>2,Bel</sub> =
> 4.935 \[mol ATP · mol O<sub>2</sub><sup>-1</sup>\] <br> <br>
> $PCr = \frac{1.5 \cdot 4.935 \cdot 1000}{20 \cdot 22.414} = \frac{7402.5}{448.28} = 16.51 [mmol \cdot kg^{-1}]$

Durch Umstellung der @eq-PCr können Minimal-, Durchschnitts- und Maximalwerte für den benötigten Sauerstoffumsatz zur Resynthese des Kreatinphosphats nach Belastung berechnet werden. Diese Berechnung basieren auf den bekannten PCr-Normwerten (PCr~min~, PCr~Norm~, PCr~max~) und berücksichtigt sowohl die aktive Muskelmasse als auch das P/O~2~-Verhältnis während der Belastung. Die mathematische Herleitung ist nachfolgend dargestellt:

$$
\begin{align}
VO_{\text{2PCr, Norm}} &= \frac{\text{Muskelmasse}_{\text{aktiv}} \cdot \text{PCr}_{\text{Norm}} \cdot 22.414}{\text{P/O}_{2,\text{Bel}} \cdot 1000} \notag \\ 
&\hspace{3.35cm}\downarrow \\
VO_{\text{2PCr, Norm-min}} \,[\text{l}] &= \frac{\text{Muskelmasse}_{\text{aktiv}}\,[\text{kg}] \cdot 15 \,[\text{mmol} \cdot \text{kg}^{-1}] \cdot 22.414}{\text{P/O}_{2,\text{Bel}} \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]} \cdot 1000} \\
VO_{\text{2PCr, Norm-avg}} \,[\text{l}] &= \frac{\text{Muskelmasse}_{\text{aktiv}}\,[\text{kg}] \cdot 20 \,[\text{mmol} \cdot \text{kg}^{-1}] \cdot 22.414}{\text{P/O}_{2,\text{Bel}} \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]} \cdot 1000} \\
VO_{\text{2PCr, Norm-max}} \,[\text{l}] &= \frac{\text{Muskelmasse}_{\text{aktiv}}\,[\text{kg}] \cdot 35 \,[\text{mmol} \cdot \text{kg}^{-1}] \cdot 22.414}{\text{P/O}_{2,\text{Bel}} \text{ [mol ATP} \cdot \text{mol O}_2^{-1}\text{]} \cdot 1000}
\end{align}
$$

> **Berechnungsbeispiel für VO₂PCr,Norm-avg:**<br>
> Muskelmasse<sub>aktiv</sub> = 20 [kg]; PCr = 20 [mmol · kg<sup>-1</sup>]; P/O<sub>2</sub> Ratio = 4.935 [mol ATP · mol O<sub>2</sub><sup>-1</sup>]<br><br>
> $VO_{2PCr,Norm-avg} = \frac{20 [kg] \cdot 20 [mmol \cdot kg^{-1}] \cdot 22.414}{4.935 [mol \, ATP \cdot mol \, O_2^{-1}] \cdot 1000} = \frac{8965.6}{4935} = 1.817 [l]$

```{r}
# @Mahler1979 nochmal anschauen!!!!! 
```




# Quellenverzeichnis

::: {#refs}
:::
