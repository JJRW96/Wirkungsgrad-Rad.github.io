---
execute:
  message: false
  echo: false
  warning: false
  error: false

---

# Pedal_Smoothness {.tabset}


```{r}
# Library und dfs laden
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(htmltools)
library(htmlwidgets)
library(shiny)
library(DT)
library(RColorBrewer)
library(patchwork)
library(minpack.lm)
library(zoo)
library(purrr)
library(readxl)

EPOC_data_df <- readRDS("rds/EPOC_data_df.rds")
Erg_data_df <- readRDS("rds/Erg_data_df.rds")
Erg_data_komplett <- readRDS("rds/Erg_data_komplett.rds")
Messwerte_Bedingungen_df <- readRDS("rds/Messwerte_Bedingungen_df.rds")
Messwerte_Intensitäten_df <- readRDS("rds/Messwerte_Intensitäten_df.rds")
Messwerte_Bedingung_Intensität_df <- readRDS("rds/Messwerte_Bedingung_Intensität_df.rds")
Bedingungen_data <- readRDS("rds/Bedingungen_data.rds")
P_Ges_df <- readRDS("rds/Efficiency_Daten_df.rds")
Efficiency_df <- readRDS("rds/Efficiency_Daten_df.rds")
P_Int_Drehzahl_Masse <- readRDS("rds/P_Int_Drehzahl_Masse.rds")
Simulation_df <- readRDS("rds/Simulation_df.rds")
ΔBLC_list <- readRDS("rds/BLC_list.rds")
proband_data <- readRDS("rds/proband_data.rds")
ΔBLC_data_df <- readRDS("rds/BLC_data_df.rds")
BLC_Modell_list <- readRDS("rds/BLC_Modell_list.rds")
Efficiency_Daten_df <- readRDS("rds/Efficiency_Daten_df.rds")
P_R_list <- readRDS("rds/P_R_list.rds")
P_L_list <- readRDS("rds/P_L_list.rds")
start_vals_list <- readRDS("rds/start_vals_list.rds")
VO2_list <- readRDS("rds/VO2_list.rds")
df_anthropometrisch_female <- readRDS("rds/df_anthropometrisch_female.rds")
df_anthropometrisch_male <- readRDS("rds/df_anthropometrisch_male.rds")
```


## Berechnung

![Berechnung der Pedal Smoothness](images/Pedal_Smoothness.png)

## Pedal_Smoothness vs. W_kg

```{r}
# Lineare Regression
lin_reg <- lm(Pedal_Smoothness ~ W_kg, data = P_Ges_df)
reg_coefficients <- coef(lin_reg)
r_squared <- summary(lin_reg)$r.squared
equation_text <- sprintf("y = %.2fx + %.2f", reg_coefficients["W_kg"], reg_coefficients["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", r_squared)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden für eine Sequenz von W_kg
w_kg_seq <- seq(min(P_Ges_df$W_kg), max(P_Ges_df$W_kg), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(W_kg = w_kg_seq))

# Erstellen des Plotly-Diagramms mit Regressionsgerade und statistischen Informationen + ColorBrewer
plot_ly() %>%
  add_markers(data = P_Ges_df, x = ~W_kg, y = ~Pedal_Smoothness, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "Pedal_Smoothness vs. W_kg",
         margin = list(t = 40), 
         xaxis = list(title = "W_kg"),
         yaxis = list(title = "Pedal_Smoothness")) %>%
  add_lines(x = ~w_kg_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Pedal_Smoothness), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Pedal_Smoothness) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(P_Ges_df$W_kg), y = max(P_Ges_df$Pedal_Smoothness) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```

## Pedal_Smoothness vs. Efficiency

```{r}
# Lineare Regression
lin_reg <- lm(Pedal_Smoothness ~ Efficiency, data = P_Ges_df)
reg_coefficients <- coef(lin_reg)
r_squared <- summary(lin_reg)$r.squared
equation_text <- sprintf("y = %.2fx + %.2f", reg_coefficients["Efficiency"], reg_coefficients["(Intercept)"])
r_squared_text <- sprintf("R² = %.2f", r_squared)
summary_lin_reg <- summary(lin_reg)
f_stat <- summary_lin_reg$fstatistic
p_value <- format.pval(pf(f_stat["value"], f_stat["numdf"], f_stat["dendf"], lower.tail = FALSE), digits = 4)
f_stat_text <- sprintf("F (%d, %d) = %.2f, p = %s", f_stat["numdf"], f_stat["dendf"], f_stat["value"], p_value)

# Berechnung der Regressionsgeraden für eine Sequenz von Efficiency
Efficiency_seq <- seq(min(P_Ges_df$Efficiency), max(P_Ges_df$Efficiency), length.out = 100)
regression_values <- predict(lin_reg, newdata = data.frame(Efficiency = Efficiency_seq))

# Erstellen des Plotly-Diagramms mit Regressionsgerade und statistischen Informationen + ColorBrewer
plot_ly() %>%
  add_markers(data = P_Ges_df, x = ~Efficiency, y = ~Pedal_Smoothness, type = 'scatter', mode = 'markers',
              color = ~factor(Proband), colors = colorRampPalette(brewer.pal(10,"Spectral"))(20),
              marker = list(size = 9, opacity = 0.8)) %>%
  layout(title = "Pedal_Smoothness vs. Efficiency",
         margin = list(t = 40), 
         xaxis = list(title = "Efficiency"),
         yaxis = list(title = "Pedal_Smoothness")) %>%
  add_lines(x = ~Efficiency_seq, y = ~regression_values, name = "Regressionslinie", line = list(color = 'darkgrey', width = 2)) %>%
  add_annotations(text = equation_text, x = min(P_Ges_df$Efficiency), y = max(P_Ges_df$Pedal_Smoothness), 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = r_squared_text, x = min(P_Ges_df$Efficiency), y = max(P_Ges_df$Pedal_Smoothness) * 0.98, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom') %>%
  add_annotations(text = f_stat_text, x = min(P_Ges_df$Efficiency), y = max(P_Ges_df$Pedal_Smoothness) * 0.96, 
                  showarrow = FALSE, xanchor = 'left', yanchor = 'bottom')
```